{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Wazuh Security Dashboard\n\n## Overview\n\nThis is a modern web-based security monitoring dashboard built for Wazuh, an open-source security platform. The application provides real-time visualization of security metrics, alerts, vulnerabilities, compliance status, and MITRE ATT&CK framework data. It features a responsive design with a dark theme optimized for security operations centers (SOCs).\n\nThe system is designed as a full-stack application with a React frontend and Express.js backend, providing comprehensive security monitoring capabilities including agent management, alert tracking, vulnerability assessment, and compliance reporting.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type-safe development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with custom Wazuh-branded color scheme and dark theme\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API architecture with structured endpoints for different data domains\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Validation**: Zod for runtime type validation of API requests and responses\n- **Development**: Hot reload and middleware integration for development workflow\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon for production-ready cloud database\n- **ORM**: Drizzle ORM providing type-safe database queries and migrations\n- **Schema Management**: Structured schema definitions in shared directory for consistency\n- **Connection**: Serverless-compatible database connection using @neondatabase/serverless\n\n### Database Schema Design\nThe application uses a relational schema with the following core entities:\n- **Agents**: Security agents with status tracking, version info, and platform details\n- **Alerts**: Security alerts with severity levels, MITRE ATT&CK mappings, and resolution status\n- **Vulnerabilities**: CVE tracking with severity classification and package information\n- **Compliance Results**: Framework compliance tracking (PCI DSS, GDPR, HIPAA, NIST 800-53)\n- **MITRE ATT&CK Data**: Attack technique tracking with alert correlation\n\n### API Structure\nThe backend provides organized endpoints grouped by functionality:\n- `/api/dashboard/*` - Dashboard metrics and KPI data\n- `/api/agents/*` - Agent management and status monitoring\n- `/api/alerts/*` - Alert retrieval, filtering, and timeline data\n- `/api/vulnerabilities/*` - Vulnerability management and distribution analytics\n- `/api/compliance/*` - Compliance framework reporting\n- `/api/mitre-attack/*` - MITRE ATT&CK framework data\n\n### Authentication and Authorization\nThe application is prepared for session-based authentication with:\n- Session storage using connect-pg-simple for PostgreSQL-backed sessions\n- Middleware structure for request logging and error handling\n- Credential-based API requests with CORS support\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting for production deployment\n- **Drizzle Kit**: Database migration and schema management tool\n\n### UI and Component Libraries\n- **Radix UI**: Comprehensive set of accessible UI primitives for React\n- **shadcn/ui**: Pre-built component library built on Radix UI with Tailwind CSS\n- **Lucide React**: Icon library providing consistent iconography\n- **Recharts**: Chart library for data visualization components\n\n### Development and Build Tools\n- **Replit Integration**: Platform-specific plugins for development environment\n- **ESBuild**: Fast JavaScript bundler for server-side builds\n- **PostCSS and Autoprefixer**: CSS processing for cross-browser compatibility\n\n### Data Visualization\n- **Recharts**: React charting library for alerts timeline, vulnerability distribution, and other analytics\n- **Date-fns**: Date manipulation library for time-based data processing\n\n### Form and Data Handling\n- **React Hook Form**: Form state management with validation\n- **Zod Resolvers**: Integration between Zod validation and React Hook Form\n- **TanStack Query**: Server state management with caching and background updates\n\nThe architecture prioritizes type safety throughout the stack, real-time data updates, and a scalable design that can accommodate growing security monitoring needs.","size_bytes":4718},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        wazuh: {\n          primary: \"var(--wazuh-primary)\",\n          secondary: \"var(--wazuh-secondary)\",\n          accent: \"var(--wazuh-accent)\",\n          success: \"var(--wazuh-success)\",\n          warning: \"var(--wazuh-warning)\",\n          error: \"var(--wazuh-error)\",\n          dark: \"var(--wazuh-dark)\",\n          surface: \"var(--wazuh-surface)\",\n          \"surface-variant\": \"var(--wazuh-surface-variant)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        roboto: [\"Roboto\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3222},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertAlertSchema, insertAgentSchema, insertVulnerabilitySchema, insertComplianceResultSchema, insertMitreAttackSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Dashboard metrics endpoint\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  // Agent endpoints\n  app.get(\"/api/agents\", async (req, res) => {\n    try {\n      const agents = await storage.getAgents();\n      res.json(agents);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch agents\" });\n    }\n  });\n\n  app.get(\"/api/agents/status\", async (req, res) => {\n    try {\n      const statusCounts = await storage.getAgentStatusCounts();\n      res.json(statusCounts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch agent status\" });\n    }\n  });\n\n  app.get(\"/api/agents/recent\", async (req, res) => {\n    try {\n      const recentActivity = await storage.getRecentAgentActivity();\n      res.json(recentActivity);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recent agent activity\" });\n    }\n  });\n\n  app.post(\"/api/agents\", async (req, res) => {\n    try {\n      const validatedData = insertAgentSchema.parse(req.body);\n      const agent = await storage.createAgent(validatedData);\n      res.status(201).json(agent);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid agent data\" });\n    }\n  });\n\n  app.get(\"/api/agents/:id\", async (req, res) => {\n    try {\n      const agent = await storage.getAgent(req.params.id);\n      if (!agent) {\n        return res.status(404).json({ message: \"Agent not found\" });\n      }\n      res.json(agent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch agent\" });\n    }\n  });\n\n  // Alert endpoints\n  app.get(\"/api/alerts\", async (req, res) => {\n    try {\n      const { search, page, limit } = req.query;\n      const filters = {\n        search: search as string,\n        page: page ? parseInt(page as string) : undefined,\n        limit: limit ? parseInt(limit as string) : undefined,\n      };\n      const alerts = await storage.getAlerts(filters);\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch alerts\" });\n    }\n  });\n\n  app.get(\"/api/alerts/timeline\", async (req, res) => {\n    try {\n      const timeline = await storage.getAlertsTimeline();\n      res.json(timeline);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch alerts timeline\" });\n    }\n  });\n\n  app.post(\"/api/alerts\", async (req, res) => {\n    try {\n      const validatedData = insertAlertSchema.parse(req.body);\n      const alert = await storage.createAlert(validatedData);\n      res.status(201).json(alert);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid alert data\" });\n    }\n  });\n\n  app.get(\"/api/alerts/:id\", async (req, res) => {\n    try {\n      const alert = await storage.getAlert(req.params.id);\n      if (!alert) {\n        return res.status(404).json({ message: \"Alert not found\" });\n      }\n      res.json(alert);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch alert\" });\n    }\n  });\n\n  // Vulnerability endpoints\n  app.get(\"/api/vulnerabilities\", async (req, res) => {\n    try {\n      const vulnerabilities = await storage.getVulnerabilities();\n      res.json(vulnerabilities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vulnerabilities\" });\n    }\n  });\n\n  app.get(\"/api/vulnerabilities/distribution\", async (req, res) => {\n    try {\n      const distribution = await storage.getVulnerabilityDistribution();\n      res.json(distribution);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vulnerability distribution\" });\n    }\n  });\n\n  app.post(\"/api/vulnerabilities\", async (req, res) => {\n    try {\n      const validatedData = insertVulnerabilitySchema.parse(req.body);\n      const vulnerability = await storage.createVulnerability(validatedData);\n      res.status(201).json(vulnerability);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid vulnerability data\" });\n    }\n  });\n\n  app.get(\"/api/vulnerabilities/:id\", async (req, res) => {\n    try {\n      const vulnerability = await storage.getVulnerability(req.params.id);\n      if (!vulnerability) {\n        return res.status(404).json({ message: \"Vulnerability not found\" });\n      }\n      res.json(vulnerability);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch vulnerability\" });\n    }\n  });\n\n  // Compliance endpoints\n  app.get(\"/api/compliance\", async (req, res) => {\n    try {\n      const results = await storage.getComplianceResults();\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch compliance results\" });\n    }\n  });\n\n  app.get(\"/api/compliance/overview\", async (req, res) => {\n    try {\n      const overview = await storage.getComplianceOverview();\n      res.json(overview);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch compliance overview\" });\n    }\n  });\n\n  app.post(\"/api/compliance\", async (req, res) => {\n    try {\n      const validatedData = insertComplianceResultSchema.parse(req.body);\n      const result = await storage.createComplianceResult(validatedData);\n      res.status(201).json(result);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid compliance data\" });\n    }\n  });\n\n  // MITRE ATT&CK endpoints\n  app.get(\"/api/mitre-attack\", async (req, res) => {\n    try {\n      const mitreData = await storage.getMitreAttackData();\n      res.json(mitreData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch MITRE ATT&CK data\" });\n    }\n  });\n\n  app.post(\"/api/mitre-attack\", async (req, res) => {\n    try {\n      const validatedData = insertMitreAttackSchema.parse(req.body);\n      const mitreData = await storage.createMitreAttackData(validatedData);\n      res.status(201).json(mitreData);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid MITRE ATT&CK data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6507},"server/storage.ts":{"content":"import { \n  type Agent, \n  type InsertAgent,\n  type Alert,\n  type InsertAlert,\n  type Vulnerability,\n  type InsertVulnerability,\n  type ComplianceResult,\n  type InsertComplianceResult,\n  type MitreAttackData,\n  type InsertMitreAttack,\n  type DashboardMetrics,\n  type AgentStatusCounts,\n  type ComplianceFrameworkScore\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Agent methods\n  getAgents(): Promise<Agent[]>;\n  getAgent(id: string): Promise<Agent | undefined>;\n  createAgent(agent: InsertAgent): Promise<Agent>;\n  updateAgent(id: string, agent: Partial<Agent>): Promise<Agent | undefined>;\n  getAgentStatusCounts(): Promise<AgentStatusCounts>;\n  getRecentAgentActivity(): Promise<Agent[]>;\n\n  // Alert methods\n  getAlerts(filters?: { search?: string; page?: number; limit?: number }): Promise<Alert[]>;\n  getAlert(id: string): Promise<Alert | undefined>;\n  createAlert(alert: InsertAlert): Promise<Alert>;\n  getAlertsTimeline(): Promise<any[]>;\n\n  // Vulnerability methods\n  getVulnerabilities(): Promise<Vulnerability[]>;\n  getVulnerability(id: string): Promise<Vulnerability | undefined>;\n  createVulnerability(vulnerability: InsertVulnerability): Promise<Vulnerability>;\n  getVulnerabilityDistribution(): Promise<any[]>;\n\n  // Compliance methods\n  getComplianceResults(): Promise<ComplianceResult[]>;\n  createComplianceResult(result: InsertComplianceResult): Promise<ComplianceResult>;\n  getComplianceOverview(): Promise<ComplianceFrameworkScore[]>;\n\n  // MITRE ATT&CK methods\n  getMitreAttackData(): Promise<MitreAttackData[]>;\n  createMitreAttackData(data: InsertMitreAttack): Promise<MitreAttackData>;\n\n  // Dashboard methods\n  getDashboardMetrics(): Promise<DashboardMetrics>;\n}\n\nexport class MemStorage implements IStorage {\n  private agents: Map<string, Agent> = new Map();\n  private alerts: Map<string, Alert> = new Map();\n  private vulnerabilities: Map<string, Vulnerability> = new Map();\n  private complianceResults: Map<string, ComplianceResult> = new Map();\n  private mitreAttackData: Map<string, MitreAttackData> = new Map();\n\n  constructor() {\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize with empty data - will be populated by API\n  }\n\n  // Agent methods\n  async getAgents(): Promise<Agent[]> {\n    return Array.from(this.agents.values());\n  }\n\n  async getAgent(id: string): Promise<Agent | undefined> {\n    return this.agents.get(id);\n  }\n\n  async createAgent(insertAgent: InsertAgent): Promise<Agent> {\n    const id = randomUUID();\n    const agent: Agent = { \n      ...insertAgent, \n      id,\n      lastSeen: new Date()\n    };\n    this.agents.set(id, agent);\n    return agent;\n  }\n\n  async updateAgent(id: string, updates: Partial<Agent>): Promise<Agent | undefined> {\n    const agent = this.agents.get(id);\n    if (!agent) return undefined;\n\n    const updatedAgent = { ...agent, ...updates };\n    this.agents.set(id, updatedAgent);\n    return updatedAgent;\n  }\n\n  async getAgentStatusCounts(): Promise<AgentStatusCounts> {\n    const agents = Array.from(this.agents.values());\n    return {\n      active: agents.filter(a => a.status === 'active').length,\n      disconnected: agents.filter(a => a.status === 'disconnected').length,\n      pending: agents.filter(a => a.status === 'pending').length,\n    };\n  }\n\n  async getRecentAgentActivity(): Promise<Agent[]> {\n    const agents = Array.from(this.agents.values());\n    return agents\n      .sort((a, b) => (b.lastSeen?.getTime() || 0) - (a.lastSeen?.getTime() || 0))\n      .slice(0, 5);\n  }\n\n  // Alert methods\n  async getAlerts(filters?: { search?: string; page?: number; limit?: number }): Promise<Alert[]> {\n    let alerts = Array.from(this.alerts.values());\n    \n    if (filters?.search) {\n      const search = filters.search.toLowerCase();\n      alerts = alerts.filter(alert => \n        alert.rule.toLowerCase().includes(search) ||\n        alert.agentName.toLowerCase().includes(search) ||\n        alert.description.toLowerCase().includes(search)\n      );\n    }\n\n    // Sort by timestamp (newest first)\n    alerts.sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0));\n\n    // Apply pagination\n    if (filters?.page && filters?.limit) {\n      const start = (filters.page - 1) * filters.limit;\n      alerts = alerts.slice(start, start + filters.limit);\n    }\n\n    return alerts;\n  }\n\n  async getAlert(id: string): Promise<Alert | undefined> {\n    return this.alerts.get(id);\n  }\n\n  async createAlert(insertAlert: InsertAlert): Promise<Alert> {\n    const id = randomUUID();\n    const alert: Alert = { \n      ...insertAlert, \n      id,\n      timestamp: new Date()\n    };\n    this.alerts.set(id, alert);\n    return alert;\n  }\n\n  async getAlertsTimeline(): Promise<any[]> {\n    // Generate timeline data for charts\n    const now = new Date();\n    const hours = [];\n    \n    for (let i = 6; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * 4 * 60 * 60 * 1000);\n      const timeStr = time.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n      \n      const alerts = Array.from(this.alerts.values()).filter(alert => {\n        const alertTime = alert.timestamp || new Date();\n        return alertTime >= new Date(time.getTime() - 4 * 60 * 60 * 1000) && \n               alertTime < new Date(time.getTime() + 4 * 60 * 60 * 1000);\n      });\n\n      hours.push({\n        time: timeStr,\n        critical: alerts.filter(a => a.severity === 'critical').length,\n        high: alerts.filter(a => a.severity === 'high').length,\n        medium: alerts.filter(a => a.severity === 'medium').length,\n        low: alerts.filter(a => a.severity === 'low').length,\n      });\n    }\n    \n    return hours;\n  }\n\n  // Vulnerability methods\n  async getVulnerabilities(): Promise<Vulnerability[]> {\n    return Array.from(this.vulnerabilities.values());\n  }\n\n  async getVulnerability(id: string): Promise<Vulnerability | undefined> {\n    return this.vulnerabilities.get(id);\n  }\n\n  async createVulnerability(insertVulnerability: InsertVulnerability): Promise<Vulnerability> {\n    const id = randomUUID();\n    const vulnerability: Vulnerability = { \n      ...insertVulnerability, \n      id,\n      detectedAt: new Date()\n    };\n    this.vulnerabilities.set(id, vulnerability);\n    return vulnerability;\n  }\n\n  async getVulnerabilityDistribution(): Promise<any[]> {\n    const vulns = Array.from(this.vulnerabilities.values());\n    return [\n      { name: 'Critical', value: vulns.filter(v => v.severity === 'critical').length, color: '#EF4444' },\n      { name: 'High', value: vulns.filter(v => v.severity === 'high').length, color: '#F59E0B' },\n      { name: 'Medium', value: vulns.filter(v => v.severity === 'medium').length, color: '#FCD34D' },\n      { name: 'Low', value: vulns.filter(v => v.severity === 'low').length, color: '#10B981' },\n    ];\n  }\n\n  // Compliance methods\n  async getComplianceResults(): Promise<ComplianceResult[]> {\n    return Array.from(this.complianceResults.values());\n  }\n\n  async createComplianceResult(insertResult: InsertComplianceResult): Promise<ComplianceResult> {\n    const id = randomUUID();\n    const result: ComplianceResult = { \n      ...insertResult, \n      id,\n      lastChecked: new Date()\n    };\n    this.complianceResults.set(id, result);\n    return result;\n  }\n\n  async getComplianceOverview(): Promise<ComplianceFrameworkScore[]> {\n    const results = Array.from(this.complianceResults.values());\n    const frameworks = ['PCI_DSS', 'GDPR', 'HIPAA', 'NIST_800_53'];\n    \n    return frameworks.map(framework => {\n      const frameworkResults = results.filter(r => r.framework === framework);\n      const passed = frameworkResults.filter(r => r.status === 'pass').length;\n      const total = frameworkResults.length || 1; // Avoid division by zero\n      const percentage = Math.round((passed / total) * 100);\n      \n      return {\n        framework,\n        score: passed,\n        total,\n        percentage\n      };\n    });\n  }\n\n  // MITRE ATT&CK methods\n  async getMitreAttackData(): Promise<MitreAttackData[]> {\n    return Array.from(this.mitreAttackData.values());\n  }\n\n  async createMitreAttackData(insertData: InsertMitreAttack): Promise<MitreAttackData> {\n    const id = randomUUID();\n    const data: MitreAttackData = { \n      ...insertData, \n      id,\n      lastSeen: new Date()\n    };\n    this.mitreAttackData.set(id, data);\n    return data;\n  }\n\n  // Dashboard methods\n  async getDashboardMetrics(): Promise<DashboardMetrics> {\n    const agents = Array.from(this.agents.values());\n    const alerts = Array.from(this.alerts.values());\n    const vulnerabilities = Array.from(this.vulnerabilities.values());\n    const complianceOverview = await this.getComplianceOverview();\n    \n    const avgCompliance = complianceOverview.reduce((sum, f) => sum + f.percentage, 0) / complianceOverview.length;\n\n    return {\n      activeAgents: agents.filter(a => a.status === 'active').length,\n      criticalAlerts: alerts.filter(a => a.severity === 'critical').length,\n      vulnerabilities: vulnerabilities.length,\n      complianceScore: Math.round(avgCompliance)\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9136},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const agents = pgTable(\"agents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  ip: text(\"ip\").notNull(),\n  status: text(\"status\").notNull(), // \"active\", \"disconnected\", \"pending\"\n  lastSeen: timestamp(\"last_seen\"),\n  version: text(\"version\"),\n  os: text(\"os\"),\n  platform: text(\"platform\"),\n});\n\nexport const alerts = pgTable(\"alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agentId: varchar(\"agent_id\").references(() => agents.id),\n  agentName: text(\"agent_name\").notNull(),\n  rule: text(\"rule\").notNull(),\n  severity: text(\"severity\").notNull(), // \"critical\", \"high\", \"medium\", \"low\"\n  description: text(\"description\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  mitreAttack: jsonb(\"mitre_attack\"), // Array of MITRE ATT&CK technique IDs\n  resolved: boolean(\"resolved\").default(false),\n});\n\nexport const vulnerabilities = pgTable(\"vulnerabilities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agentId: varchar(\"agent_id\").references(() => agents.id),\n  agentName: text(\"agent_name\").notNull(),\n  cve: text(\"cve\").notNull(),\n  severity: text(\"severity\").notNull(), // \"critical\", \"high\", \"medium\", \"low\"\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  package: text(\"package\"),\n  version: text(\"version\"),\n  detectedAt: timestamp(\"detected_at\").defaultNow(),\n  status: text(\"status\").default(\"open\"), // \"open\", \"fixed\", \"ignored\"\n});\n\nexport const complianceResults = pgTable(\"compliance_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  framework: text(\"framework\").notNull(), // \"PCI_DSS\", \"GDPR\", \"HIPAA\", \"NIST_800_53\"\n  requirement: text(\"requirement\").notNull(),\n  status: text(\"status\").notNull(), // \"pass\", \"fail\", \"not_applicable\"\n  agentId: varchar(\"agent_id\").references(() => agents.id),\n  agentName: text(\"agent_name\"),\n  description: text(\"description\"),\n  lastChecked: timestamp(\"last_checked\").defaultNow(),\n});\n\nexport const mitreAttackData = pgTable(\"mitre_attack_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  techniqueId: text(\"technique_id\").notNull(),\n  techniqueName: text(\"technique_name\").notNull(),\n  tactic: text(\"tactic\").notNull(),\n  description: text(\"description\"),\n  alertCount: integer(\"alert_count\").default(0),\n  lastSeen: timestamp(\"last_seen\"),\n});\n\nexport const insertAgentSchema = createInsertSchema(agents).omit({\n  id: true,\n  lastSeen: true,\n});\n\nexport const insertAlertSchema = createInsertSchema(alerts).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertVulnerabilitySchema = createInsertSchema(vulnerabilities).omit({\n  id: true,\n  detectedAt: true,\n});\n\nexport const insertComplianceResultSchema = createInsertSchema(complianceResults).omit({\n  id: true,\n  lastChecked: true,\n});\n\nexport const insertMitreAttackSchema = createInsertSchema(mitreAttackData).omit({\n  id: true,\n  lastSeen: true,\n});\n\nexport type Agent = typeof agents.$inferSelect;\nexport type InsertAgent = z.infer<typeof insertAgentSchema>;\nexport type Alert = typeof alerts.$inferSelect;\nexport type InsertAlert = z.infer<typeof insertAlertSchema>;\nexport type Vulnerability = typeof vulnerabilities.$inferSelect;\nexport type InsertVulnerability = z.infer<typeof insertVulnerabilitySchema>;\nexport type ComplianceResult = typeof complianceResults.$inferSelect;\nexport type InsertComplianceResult = z.infer<typeof insertComplianceResultSchema>;\nexport type MitreAttackData = typeof mitreAttackData.$inferSelect;\nexport type InsertMitreAttack = z.infer<typeof insertMitreAttackSchema>;\n\n// Dashboard metrics types\nexport type DashboardMetrics = {\n  activeAgents: number;\n  criticalAlerts: number;\n  vulnerabilities: number;\n  complianceScore: number;\n};\n\nexport type AgentStatusCounts = {\n  active: number;\n  disconnected: number;\n  pending: number;\n};\n\nexport type ComplianceFrameworkScore = {\n  framework: string;\n  score: number;\n  total: number;\n  percentage: number;\n};\n","size_bytes":4236},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Analytics from \"@/pages/analytics\";\nimport Alerts from \"@/pages/alerts\";\nimport Vulnerabilities from \"@/pages/vulnerabilities\";\nimport FileIntegrity from \"@/pages/file-integrity\";\nimport MitreAttack from \"@/pages/mitre-attack\";\nimport PciDss from \"@/pages/pci-dss\";\nimport Gdpr from \"@/pages/gdpr\";\nimport Hipaa from \"@/pages/hipaa\";\nimport Nist from \"@/pages/nist\";\nimport Agents from \"@/pages/agents\";\nimport Configuration from \"@/pages/configuration\";\nimport ApiConsole from \"@/pages/api-console\";\nimport RulesetTest from \"@/pages/ruleset-test\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/alerts\" component={Alerts} />\n      <Route path=\"/vulnerabilities\" component={Vulnerabilities} />\n      <Route path=\"/file-integrity\" component={FileIntegrity} />\n      <Route path=\"/mitre-attack\" component={MitreAttack} />\n      <Route path=\"/pci-dss\" component={PciDss} />\n      <Route path=\"/gdpr\" component={Gdpr} />\n      <Route path=\"/hipaa\" component={Hipaa} />\n      <Route path=\"/nist\" component={Nist} />\n      <Route path=\"/agents\" component={Agents} />\n      <Route path=\"/configuration\" component={Configuration} />\n      <Route path=\"/api-console\" component={ApiConsole} />\n      <Route path=\"/ruleset-test\" component={RulesetTest} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2051},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  \n  /* Wazuh specific colors */\n  --wazuh-primary: hsl(210 65% 50%);\n  --wazuh-secondary: hsl(0 0% 26%);\n  --wazuh-accent: hsl(14 100% 57%);\n  --wazuh-success: hsl(122 39% 49%);\n  --wazuh-warning: hsl(36 100% 50%);\n  --wazuh-error: hsl(4 90% 58%);\n  --wazuh-dark: hsl(0 0% 7%);\n  --wazuh-surface: hsl(0 0% 12%);\n  --wazuh-surface-variant: hsl(0 0% 18%);\n}\n\n.dark {\n  --background: hsl(0 0% 7%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(0 0% 12%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 7%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(210 65% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(0 0% 18%);\n  --accent-foreground: hsl(210 65% 50%);\n  --destructive: hsl(4 90% 58%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 27%);\n  --input: hsl(0 0% 18%);\n  --ring: hsl(210 65% 50%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 12%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(210 65% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 18%);\n  --sidebar-accent-foreground: hsl(210 65% 50%);\n  --sidebar-border: hsl(0 0% 27%);\n  --sidebar-ring: hsl(210 65% 50%);\n  --font-sans: 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  html {\n    @apply dark;\n  }\n}\n\n@layer components {\n  .wazuh-primary {\n    @apply bg-[hsl(var(--wazuh-primary))] text-white;\n  }\n  \n  .wazuh-surface {\n    @apply bg-[hsl(var(--wazuh-surface))] border-[hsl(var(--border))];\n  }\n  \n  .wazuh-surface-variant {\n    @apply bg-[hsl(var(--wazuh-surface-variant))];\n  }\n  \n  .severity-critical {\n    @apply bg-[hsl(var(--wazuh-error))] bg-opacity-20 text-[hsl(var(--wazuh-error))];\n  }\n  \n  .severity-high {\n    @apply bg-[hsl(var(--wazuh-warning))] bg-opacity-20 text-[hsl(var(--wazuh-warning))];\n  }\n  \n  .severity-medium {\n    @apply bg-yellow-500 bg-opacity-20 text-yellow-500;\n  }\n  \n  .severity-low {\n    @apply bg-[hsl(var(--wazuh-success))] bg-opacity-20 text-[hsl(var(--wazuh-success))];\n  }\n}\n","size_bytes":4304},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/agents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Filter, Download, Server, Plus, Eye, Settings, RefreshCw, Trash2 } from \"lucide-react\";\nimport type { Agent } from \"@shared/schema\";\n\nexport default function Agents() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [osFilter, setOsFilter] = useState(\"all\");\n  \n  const { data: agents, isLoading } = useQuery<Agent[]>({\n    queryKey: [\"/api/agents\"],\n    refetchInterval: 30000,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-400 bg-opacity-20 text-green-400';\n      case 'disconnected':\n        return 'bg-gray-500 bg-opacity-20 text-gray-400';\n      case 'pending':\n        return 'bg-yellow-500 bg-opacity-20 text-yellow-400';\n      default:\n        return 'bg-gray-500 bg-opacity-20 text-gray-400';\n    }\n  };\n\n  const getStatusDot = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-400';\n      case 'disconnected':\n        return 'bg-gray-500';\n      case 'pending':\n        return 'bg-yellow-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const formatLastSeen = (lastSeen: string | Date | null) => {\n    if (!lastSeen) return 'Never';\n    const now = new Date();\n    const time = new Date(lastSeen);\n    const diffMs = now.getTime() - time.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    \n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins} min ago`;\n    if (diffMins < 1440) return `${Math.floor(diffMins / 60)} hours ago`;\n    return `${Math.floor(diffMins / 1440)} days ago`;\n  };\n\n  const filteredAgents = agents?.filter(agent => {\n    if (statusFilter !== \"all\" && agent.status !== statusFilter) return false;\n    if (osFilter !== \"all\" && agent.os !== osFilter) return false;\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase();\n      return agent.name.toLowerCase().includes(search) ||\n             agent.ip.toLowerCase().includes(search) ||\n             (agent.os && agent.os.toLowerCase().includes(search)) ||\n             (agent.platform && agent.platform.toLowerCase().includes(search));\n    }\n    return true;\n  }) || [];\n\n  const activeAgents = filteredAgents.filter(a => a.status === 'active').length;\n  const disconnectedAgents = filteredAgents.filter(a => a.status === 'disconnected').length;\n  const pendingAgents = filteredAgents.filter(a => a.status === 'pending').length;\n\n  // Mock deployment configuration\n  const deploymentInstructions = {\n    linux: \"curl -s https://packages.wazuh.com/4.x/linux/wazuh-agent-install.sh | sudo bash\",\n    windows: \"Download and run wazuh-agent-4.x.x.msi from the Wazuh website\",\n    macos: \"Download and install wazuh-agent-4.x.x.pkg from the Wazuh website\"\n  };\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium\" data-testid=\"agents-title\">Agent Management</h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"agents-subtitle\">\n                  Monitor and manage Wazuh agents across your infrastructure\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button variant=\"outline\" className=\"border-gray-600 hover:bg-gray-700\" data-testid=\"button-refresh-agents\">\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh\n                </Button>\n                <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-deploy-agent\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Deploy Agent\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Agent Summary */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-total\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Total Agents</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{filteredAgents.length}</p>\n                    </div>\n                    <Server className=\"text-wazuh-primary w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-active\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Active</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-green-400\">{activeAgents}</p>\n                    </div>\n                    <div className=\"bg-green-400 bg-opacity-20 p-2 rounded-lg\">\n                      <Server className=\"text-green-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-disconnected\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Disconnected</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-gray-400\">{disconnectedAgents}</p>\n                    </div>\n                    <div className=\"bg-gray-500 bg-opacity-20 p-2 rounded-lg\">\n                      <Server className=\"text-gray-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-pending\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Pending</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-yellow-400\">{pendingAgents}</p>\n                    </div>\n                    <div className=\"bg-yellow-500 bg-opacity-20 p-2 rounded-lg\">\n                      <Server className=\"text-yellow-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Tabs defaultValue=\"agents\" className=\"space-y-6\">\n              <TabsList className=\"wazuh-surface-variant\">\n                <TabsTrigger value=\"agents\" data-testid=\"tab-agents\">Agents</TabsTrigger>\n                <TabsTrigger value=\"deployment\" data-testid=\"tab-deployment\">Deployment</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"agents\" className=\"space-y-6\">\n                {/* Filters */}\n                <Card className=\"wazuh-surface border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Filter className=\"w-5 h-5 mr-2\" />\n                      Filters\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex flex-wrap items-center gap-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Search className=\"w-4 h-4 text-gray-400\" />\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Search agents...\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600 w-64\"\n                          data-testid=\"input-search-agents\"\n                        />\n                      </div>\n                      \n                      <Select value={statusFilter} onValueChange={setStatusFilter}>\n                        <SelectTrigger className=\"w-40 wazuh-surface-variant border-gray-600\" data-testid=\"select-status\">\n                          <SelectValue placeholder=\"Status\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Status</SelectItem>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"disconnected\">Disconnected</SelectItem>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                        </SelectContent>\n                      </Select>\n\n                      <Select value={osFilter} onValueChange={setOsFilter}>\n                        <SelectTrigger className=\"w-40 wazuh-surface-variant border-gray-600\" data-testid=\"select-os\">\n                          <SelectValue placeholder=\"OS\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All OS</SelectItem>\n                          <SelectItem value=\"Linux\">Linux</SelectItem>\n                          <SelectItem value=\"Windows\">Windows</SelectItem>\n                          <SelectItem value=\"macOS\">macOS</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Agents Table */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"agents-table\">\n                  <CardHeader>\n                    <CardTitle>Agents ({filteredAgents.length})</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    {isLoading ? (\n                      <div className=\"p-8 text-center text-gray-400\">\n                        Loading agents...\n                      </div>\n                    ) : (\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full\">\n                          <thead className=\"wazuh-surface-variant\">\n                            <tr>\n                              <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Name</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">IP Address</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">OS</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Version</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Last Seen</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {filteredAgents.map((agent) => (\n                              <tr \n                                key={agent.id} \n                                className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                                data-testid={`agent-row-${agent.id}`}\n                              >\n                                <td className=\"p-4\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    <div className={`w-3 h-3 rounded-full ${getStatusDot(agent.status)}`}></div>\n                                    <Badge className={`text-xs ${getStatusColor(agent.status)}`}>\n                                      {agent.status}\n                                    </Badge>\n                                  </div>\n                                </td>\n                                <td className=\"p-4\">\n                                  <div className=\"font-medium\" data-testid={`agent-name-${agent.id}`}>\n                                    {agent.name}\n                                  </div>\n                                  <div className=\"text-xs text-gray-400\" data-testid={`agent-platform-${agent.id}`}>\n                                    {agent.platform || 'Unknown'}\n                                  </div>\n                                </td>\n                                <td className=\"p-4 font-mono text-sm\" data-testid={`agent-ip-${agent.id}`}>\n                                  {agent.ip}\n                                </td>\n                                <td className=\"p-4 text-sm\" data-testid={`agent-os-${agent.id}`}>\n                                  {agent.os || 'Unknown'}\n                                </td>\n                                <td className=\"p-4 text-sm\" data-testid={`agent-version-${agent.id}`}>\n                                  {agent.version || 'N/A'}\n                                </td>\n                                <td className=\"p-4 text-sm text-gray-400\" data-testid={`agent-last-seen-${agent.id}`}>\n                                  {formatLastSeen(agent.lastSeen)}\n                                </td>\n                                <td className=\"p-4\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                      data-testid={`button-view-${agent.id}`}\n                                    >\n                                      <Eye className=\"w-4 h-4\" />\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      className=\"text-gray-400 hover:bg-gray-600 hover:text-white\"\n                                      data-testid={`button-configure-${agent.id}`}\n                                    >\n                                      <Settings className=\"w-4 h-4\" />\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      className=\"text-red-400 hover:bg-red-500 hover:text-white\"\n                                      data-testid={`button-delete-${agent.id}`}\n                                    >\n                                      <Trash2 className=\"w-4 h-4\" />\n                                    </Button>\n                                  </div>\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"deployment\" className=\"space-y-6\">\n                {/* Agent Deployment */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  <Card className=\"wazuh-surface border-gray-700\" data-testid=\"deployment-linux\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <Server className=\"w-5 h-5 mr-2 text-orange-400\" />\n                        Linux\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-400 mb-4\">\n                        Deploy Wazuh agent on Linux systems using the automated installer.\n                      </p>\n                      <div className=\"bg-black bg-opacity-50 p-3 rounded border font-mono text-xs overflow-x-auto\">\n                        {deploymentInstructions.linux}\n                      </div>\n                      <Button \n                        className=\"w-full mt-4 wazuh-primary hover:bg-blue-600\"\n                        data-testid=\"button-deploy-linux\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Deploy Linux Agent\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"wazuh-surface border-gray-700\" data-testid=\"deployment-windows\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <Server className=\"w-5 h-5 mr-2 text-blue-400\" />\n                        Windows\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-400 mb-4\">\n                        Install Wazuh agent on Windows systems using the MSI installer.\n                      </p>\n                      <div className=\"bg-black bg-opacity-50 p-3 rounded border font-mono text-xs\">\n                        {deploymentInstructions.windows}\n                      </div>\n                      <Button \n                        className=\"w-full mt-4 wazuh-primary hover:bg-blue-600\"\n                        data-testid=\"button-deploy-windows\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download Windows Agent\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"wazuh-surface border-gray-700\" data-testid=\"deployment-macos\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <Server className=\"w-5 h-5 mr-2 text-gray-400\" />\n                        macOS\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-400 mb-4\">\n                        Install Wazuh agent on macOS systems using the PKG installer.\n                      </p>\n                      <div className=\"bg-black bg-opacity-50 p-3 rounded border font-mono text-xs\">\n                        {deploymentInstructions.macos}\n                      </div>\n                      <Button \n                        className=\"w-full mt-4 wazuh-primary hover:bg-blue-600\"\n                        data-testid=\"button-deploy-macos\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download macOS Agent\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Deployment Configuration */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"deployment-config\">\n                  <CardHeader>\n                    <CardTitle>Agent Configuration</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium mb-2 block\">Manager IP</label>\n                          <Input\n                            type=\"text\"\n                            placeholder=\"127.0.0.1\"\n                            className=\"wazuh-surface-variant border-gray-600\"\n                            data-testid=\"input-manager-ip\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium mb-2 block\">Manager Port</label>\n                          <Input\n                            type=\"text\"\n                            placeholder=\"1514\"\n                            className=\"wazuh-surface-variant border-gray-600\"\n                            data-testid=\"input-manager-port\"\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Agent Groups</label>\n                        <Input\n                          type=\"text\"\n                          placeholder=\"default,web-servers\"\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-agent-groups\"\n                        />\n                      </div>\n                      <Button \n                        className=\"wazuh-primary hover:bg-blue-600\"\n                        data-testid=\"button-save-config\"\n                      >\n                        Save Configuration\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":22017},"client/src/pages/alerts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, Download, AlertTriangle, AlertCircle, Info, Eye } from \"lucide-react\";\nimport type { Alert } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Alerts() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [severityFilter, setSeverityFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  const { data: alerts, isLoading } = useQuery<Alert[]>({\n    queryKey: [\"/api/alerts\", { search: searchTerm, page: currentPage, limit: 50 }],\n    refetchInterval: 30000,\n  });\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'high':\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case 'medium':\n        return <Info className=\"w-4 h-4\" />;\n      default:\n        return <Info className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getSeverityClass = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'severity-critical';\n      case 'high':\n        return 'severity-high';\n      case 'medium':\n        return 'severity-medium';\n      case 'low':\n        return 'severity-low';\n      default:\n        return 'severity-low';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string | Date) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffMs = now.getTime() - time.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    \n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins} min ago`;\n    if (diffMins < 1440) return `${Math.floor(diffMins / 60)} hours ago`;\n    return `${Math.floor(diffMins / 1440)} days ago`;\n  };\n\n  const filteredAlerts = alerts?.filter(alert => {\n    if (severityFilter !== \"all\" && alert.severity !== severityFilter) return false;\n    if (statusFilter === \"resolved\" && !alert.resolved) return false;\n    if (statusFilter === \"unresolved\" && alert.resolved) return false;\n    return true;\n  }) || [];\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium\" data-testid=\"alerts-title\">Security Alerts</h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"alerts-subtitle\">\n                  Monitor and investigate security incidents\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-export-alerts\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Alerts\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Filters */}\n            <Card className=\"wazuh-surface border-gray-700 mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Filter className=\"w-5 h-5 mr-2\" />\n                  Filters\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap items-center gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Search className=\"w-4 h-4 text-gray-400\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search alerts...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"wazuh-surface-variant border-gray-600 w-64\"\n                      data-testid=\"input-search-alerts\"\n                    />\n                  </div>\n                  \n                  <Select value={severityFilter} onValueChange={setSeverityFilter}>\n                    <SelectTrigger className=\"w-40 wazuh-surface-variant border-gray-600\" data-testid=\"select-severity\">\n                      <SelectValue placeholder=\"Severity\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Severities</SelectItem>\n                      <SelectItem value=\"critical\">Critical</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-40 wazuh-surface-variant border-gray-600\" data-testid=\"select-status\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"unresolved\">Unresolved</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Alerts Table */}\n            <Card className=\"wazuh-surface border-gray-700\" data-testid=\"alerts-table\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>All Alerts ({filteredAlerts.length})</CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"outline\" className=\"text-red-400 border-red-400\">\n                      {filteredAlerts.filter(a => a.severity === 'critical').length} Critical\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"text-yellow-400 border-yellow-400\">\n                      {filteredAlerts.filter(a => a.severity === 'high').length} High\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {isLoading ? (\n                  <div className=\"p-8 text-center text-gray-400\">\n                    Loading alerts...\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"wazuh-surface-variant\">\n                        <tr>\n                          <th className=\"text-left p-4 font-medium text-sm\">Severity</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Rule</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Agent</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Description</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Time</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {filteredAlerts.map((alert) => (\n                          <tr \n                            key={alert.id} \n                            className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                            data-testid={`alert-row-${alert.id}`}\n                          >\n                            <td className=\"p-4\">\n                              <Badge className={cn(\"inline-flex items-center px-2 py-1 rounded-full text-xs gap-1\", getSeverityClass(alert.severity))}>\n                                {getSeverityIcon(alert.severity)}\n                                {alert.severity}\n                              </Badge>\n                            </td>\n                            <td className=\"p-4 text-sm font-medium\" data-testid={`alert-rule-${alert.id}`}>\n                              {alert.rule}\n                            </td>\n                            <td className=\"p-4 text-sm\" data-testid={`alert-agent-${alert.id}`}>\n                              {alert.agentName}\n                            </td>\n                            <td className=\"p-4 text-sm text-gray-300 max-w-xs truncate\" data-testid={`alert-description-${alert.id}`}>\n                              {alert.description}\n                            </td>\n                            <td className=\"p-4 text-sm text-gray-400\" data-testid={`alert-time-${alert.id}`}>\n                              {formatTimeAgo(alert.timestamp!)}\n                            </td>\n                            <td className=\"p-4\">\n                              <Badge variant={alert.resolved ? \"default\" : \"destructive\"} className=\"text-xs\">\n                                {alert.resolved ? \"Resolved\" : \"Open\"}\n                              </Badge>\n                            </td>\n                            <td className=\"p-4\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                data-testid={`button-view-${alert.id}`}\n                              >\n                                <Eye className=\"w-4 h-4 mr-1\" />\n                                View\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":10695},"client/src/pages/analytics.tsx":{"content":"import { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell, Area, AreaChart } from 'recharts';\nimport { TrendingUp, BarChart3, PieChart as PieChartIcon, Activity } from \"lucide-react\";\n\nexport default function Analytics() {\n  // Sample data for analytics charts\n  const threatTrendData = [\n    { month: 'Jan', malware: 45, phishing: 32, ransomware: 12, apt: 8 },\n    { month: 'Feb', malware: 52, phishing: 28, ransomware: 15, apt: 6 },\n    { month: 'Mar', malware: 38, phishing: 41, ransomware: 18, apt: 9 },\n    { month: 'Apr', malware: 61, phishing: 35, ransomware: 22, apt: 11 },\n    { month: 'May', malware: 49, phishing: 39, ransomware: 19, apt: 13 },\n    { month: 'Jun', malware: 55, phishing: 44, ransomware: 25, apt: 16 },\n  ];\n\n  const agentPerformanceData = [\n    { time: '00:00', cpu: 15, memory: 32, network: 8 },\n    { time: '04:00', cpu: 18, memory: 28, network: 12 },\n    { time: '08:00', cpu: 35, memory: 45, network: 25 },\n    { time: '12:00', cpu: 42, memory: 52, network: 31 },\n    { time: '16:00', cpu: 38, memory: 48, network: 28 },\n    { time: '20:00', cpu: 25, memory: 35, network: 18 },\n  ];\n\n  const topAttackVectorsData = [\n    { name: 'Web Application', value: 35, color: '#EF4444' },\n    { name: 'Email', value: 28, color: '#F59E0B' },\n    { name: 'Network', value: 20, color: '#3B82F6' },\n    { name: 'Endpoint', value: 17, color: '#10B981' },\n  ];\n\n  const complianceMetrics = [\n    { framework: 'PCI DSS', current: 94, target: 95, change: '+2%' },\n    { framework: 'GDPR', current: 88, target: 90, change: '+5%' },\n    { framework: 'HIPAA', current: 92, target: 95, change: '+1%' },\n    { framework: 'NIST', current: 85, target: 90, change: '+3%' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium\" data-testid=\"analytics-title\">Security Analytics</h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"analytics-subtitle\">\n                  Advanced security metrics and performance insights\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6 space-y-6\">\n            {/* Analytics KPIs */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"kpi-detection-rate\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Detection Rate</p>\n                      <p className=\"text-3xl font-semibold mt-2\">97.8%</p>\n                      <p className=\"text-green-400 text-xs mt-1\">+2.1% from last month</p>\n                    </div>\n                    <div className=\"bg-green-400 bg-opacity-20 p-3 rounded-lg\">\n                      <TrendingUp className=\"text-green-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"kpi-response-time\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Avg Response Time</p>\n                      <p className=\"text-3xl font-semibold mt-2\">3.2m</p>\n                      <p className=\"text-green-400 text-xs mt-1\">-15% faster</p>\n                    </div>\n                    <div className=\"bg-blue-500 bg-opacity-20 p-3 rounded-lg\">\n                      <Activity className=\"text-blue-500 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"kpi-false-positives\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">False Positives</p>\n                      <p className=\"text-3xl font-semibold mt-2\">2.1%</p>\n                      <p className=\"text-green-400 text-xs mt-1\">-0.8% improvement</p>\n                    </div>\n                    <div className=\"bg-yellow-500 bg-opacity-20 p-3 rounded-lg\">\n                      <BarChart3 className=\"text-yellow-500 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"kpi-coverage\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Security Coverage</p>\n                      <p className=\"text-3xl font-semibold mt-2\">94.7%</p>\n                      <p className=\"text-green-400 text-xs mt-1\">+1.3% expansion</p>\n                    </div>\n                    <div className=\"bg-purple-500 bg-opacity-20 p-3 rounded-lg\">\n                      <PieChartIcon className=\"text-purple-500 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Charts Row 1 */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"threat-trends-chart\">\n                <CardHeader>\n                  <CardTitle>Threat Trends (6 Months)</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <AreaChart data={threatTrendData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                        <XAxis dataKey=\"month\" stroke=\"#9CA3AF\" fontSize={12} />\n                        <YAxis stroke=\"#9CA3AF\" fontSize={12} />\n                        <Tooltip \n                          contentStyle={{ \n                            backgroundColor: '#1F2937', \n                            border: '1px solid #374151',\n                            borderRadius: '8px'\n                          }}\n                        />\n                        <Legend />\n                        <Area type=\"monotone\" dataKey=\"malware\" stackId=\"1\" stroke=\"#EF4444\" fill=\"#EF4444\" fillOpacity={0.6} />\n                        <Area type=\"monotone\" dataKey=\"phishing\" stackId=\"1\" stroke=\"#F59E0B\" fill=\"#F59E0B\" fillOpacity={0.6} />\n                        <Area type=\"monotone\" dataKey=\"ransomware\" stackId=\"1\" stroke=\"#8B5CF6\" fill=\"#8B5CF6\" fillOpacity={0.6} />\n                        <Area type=\"monotone\" dataKey=\"apt\" stackId=\"1\" stroke=\"#10B981\" fill=\"#10B981\" fillOpacity={0.6} />\n                      </AreaChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"agent-performance-chart\">\n                <CardHeader>\n                  <CardTitle>Agent Performance Metrics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={agentPerformanceData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                        <XAxis dataKey=\"time\" stroke=\"#9CA3AF\" fontSize={12} />\n                        <YAxis stroke=\"#9CA3AF\" fontSize={12} />\n                        <Tooltip \n                          contentStyle={{ \n                            backgroundColor: '#1F2937', \n                            border: '1px solid #374151',\n                            borderRadius: '8px'\n                          }}\n                        />\n                        <Legend />\n                        <Line type=\"monotone\" dataKey=\"cpu\" stroke=\"#3B82F6\" strokeWidth={2} name=\"CPU %\" />\n                        <Line type=\"monotone\" dataKey=\"memory\" stroke=\"#10B981\" strokeWidth={2} name=\"Memory %\" />\n                        <Line type=\"monotone\" dataKey=\"network\" stroke=\"#F59E0B\" strokeWidth={2} name=\"Network %\" />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Charts Row 2 */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"attack-vectors-chart\">\n                <CardHeader>\n                  <CardTitle>Top Attack Vectors</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={topAttackVectorsData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          outerRadius={80}\n                          paddingAngle={5}\n                          dataKey=\"value\"\n                        >\n                          {topAttackVectorsData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                          ))}\n                        </Pie>\n                        <Tooltip \n                          contentStyle={{ \n                            backgroundColor: '#1F2937', \n                            border: '1px solid #374151',\n                            borderRadius: '8px'\n                          }}\n                        />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"compliance-metrics\">\n                <CardHeader>\n                  <CardTitle>Compliance Metrics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {complianceMetrics.map((metric) => (\n                      <div key={metric.framework} className=\"flex items-center justify-between p-4 wazuh-surface-variant rounded\">\n                        <div>\n                          <div className=\"font-medium\">{metric.framework}</div>\n                          <div className=\"text-sm text-gray-400\">Target: {metric.target}%</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-lg font-semibold\">{metric.current}%</div>\n                          <div className=\"text-sm text-green-400\">{metric.change}</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":11823},"client/src/pages/api-console.tsx":{"content":"import { useState } from \"react\";\nimport { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Code, Play, Copy, Download, BookOpen, Server, Database } from \"lucide-react\";\n\nexport default function ApiConsole() {\n  const [selectedEndpoint, setSelectedEndpoint] = useState(\"\");\n  const [requestMethod, setRequestMethod] = useState(\"GET\");\n  const [requestBody, setRequestBody] = useState(\"\");\n  const [responseData, setResponseData] = useState(\"\");\n  const [responseStatus, setResponseStatus] = useState<number | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // API endpoints categorized\n  const apiEndpoints = [\n    {\n      category: \"Agents\",\n      endpoints: [\n        { method: \"GET\", path: \"/agents\", description: \"List all agents\" },\n        { method: \"GET\", path: \"/agents/{agent_id}\", description: \"Get agent details\" },\n        { method: \"POST\", path: \"/agents\", description: \"Add new agent\" },\n        { method: \"DELETE\", path: \"/agents/{agent_id}\", description: \"Remove agent\" },\n        { method: \"GET\", path: \"/agents/stats\", description: \"Get agent statistics\" }\n      ]\n    },\n    {\n      category: \"Security Events\",\n      endpoints: [\n        { method: \"GET\", path: \"/events\", description: \"Get security events\" },\n        { method: \"GET\", path: \"/events/{event_id}\", description: \"Get specific event\" },\n        { method: \"GET\", path: \"/events/stats\", description: \"Get event statistics\" }\n      ]\n    },\n    {\n      category: \"Rules\",\n      endpoints: [\n        { method: \"GET\", path: \"/rules\", description: \"List all rules\" },\n        { method: \"GET\", path: \"/rules/{rule_id}\", description: \"Get rule details\" },\n        { method: \"POST\", path: \"/rules\", description: \"Create custom rule\" },\n        { method: \"PUT\", path: \"/rules/{rule_id}\", description: \"Update rule\" },\n        { method: \"DELETE\", path: \"/rules/{rule_id}\", description: \"Delete rule\" }\n      ]\n    },\n    {\n      category: \"Configuration\",\n      endpoints: [\n        { method: \"GET\", path: \"/manager/config\", description: \"Get manager configuration\" },\n        { method: \"PUT\", path: \"/manager/config\", description: \"Update manager configuration\" },\n        { method: \"GET\", path: \"/cluster/config\", description: \"Get cluster configuration\" }\n      ]\n    }\n  ];\n\n  const exampleRequests = {\n    \"GET /agents\": {\n      description: \"Retrieve a list of all registered agents\",\n      body: \"\",\n      response: `{\n  \"data\": {\n    \"affected_items\": [\n      {\n        \"id\": \"001\",\n        \"name\": \"web-server-01\",\n        \"ip\": \"192.168.1.100\",\n        \"status\": \"active\",\n        \"node_name\": \"worker-1\",\n        \"dateAdd\": \"2024-01-15T10:30:00Z\",\n        \"version\": \"4.8.0\",\n        \"os\": {\n          \"arch\": \"x86_64\",\n          \"major\": \"20\",\n          \"minor\": \"04\",\n          \"name\": \"Ubuntu\",\n          \"platform\": \"ubuntu\"\n        }\n      }\n    ],\n    \"total_affected_items\": 1\n  }\n}`\n    },\n    \"POST /agents\": {\n      description: \"Register a new agent\",\n      body: `{\n  \"name\": \"new-server\",\n  \"ip\": \"192.168.1.150\"\n}`,\n      response: `{\n  \"data\": {\n    \"id\": \"002\",\n    \"key\": \"MDEyIDEyNy4wLjAuMSA4YjUzNmE0ZDQ...\"\n  }\n}`\n    },\n    \"GET /events\": {\n      description: \"Retrieve security events with optional filters\",\n      body: \"\",\n      response: `{\n  \"data\": {\n    \"affected_items\": [\n      {\n        \"timestamp\": \"2024-01-20T15:45:30Z\",\n        \"rule\": {\n          \"id\": 5501,\n          \"description\": \"Login session opened\",\n          \"level\": 3\n        },\n        \"agent\": {\n          \"id\": \"001\",\n          \"name\": \"web-server-01\"\n        },\n        \"location\": \"/var/log/auth.log\"\n      }\n    ],\n    \"total_affected_items\": 1\n  }\n}`\n    }\n  };\n\n  const handleExecuteRequest = async () => {\n    if (!selectedEndpoint) return;\n    \n    setIsLoading(true);\n    \n    try {\n      // Mock API call simulation\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const example = exampleRequests[`${requestMethod} ${selectedEndpoint}` as keyof typeof exampleRequests];\n      if (example) {\n        setResponseData(example.response);\n        setResponseStatus(200);\n      } else {\n        setResponseData(JSON.stringify({ error: \"Endpoint not found\" }, null, 2));\n        setResponseStatus(404);\n      }\n    } catch (error) {\n      setResponseData(JSON.stringify({ error: \"Request failed\" }, null, 2));\n      setResponseStatus(500);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCopyResponse = () => {\n    navigator.clipboard.writeText(responseData);\n  };\n\n  const getStatusColor = (status: number | null) => {\n    if (!status) return \"bg-gray-500 bg-opacity-20 text-gray-400\";\n    if (status >= 200 && status < 300) return \"bg-green-400 bg-opacity-20 text-green-400\";\n    if (status >= 400) return \"bg-red-400 bg-opacity-20 text-red-400\";\n    return \"bg-yellow-400 bg-opacity-20 text-yellow-400\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium flex items-center\" data-testid=\"api-console-title\">\n                  <Code className=\"w-8 h-8 text-wazuh-primary mr-3\" />\n                  API Console\n                </h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"api-console-subtitle\">\n                  Interact with the Wazuh REST API\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button \n                  variant=\"outline\" \n                  className=\"border-gray-600 hover:bg-gray-700\"\n                  data-testid=\"button-api-docs\"\n                >\n                  <BookOpen className=\"w-4 h-4 mr-2\" />\n                  API Documentation\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* API Endpoints Sidebar */}\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"api-endpoints\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Server className=\"w-5 h-5 mr-2\" />\n                    API Endpoints\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 max-h-96 overflow-y-auto\">\n                  {apiEndpoints.map((category) => (\n                    <div key={category.category} className=\"p-4 border-b border-gray-700 last:border-b-0\">\n                      <h4 className=\"font-medium text-sm mb-3 text-gray-300\">{category.category}</h4>\n                      <div className=\"space-y-2\">\n                        {category.endpoints.map((endpoint) => (\n                          <button\n                            key={`${endpoint.method} ${endpoint.path}`}\n                            onClick={() => {\n                              setSelectedEndpoint(endpoint.path);\n                              setRequestMethod(endpoint.method);\n                              const example = exampleRequests[`${endpoint.method} ${endpoint.path}` as keyof typeof exampleRequests];\n                              setRequestBody(example?.body || \"\");\n                            }}\n                            className={`w-full text-left p-2 rounded hover:bg-wazuh-surface-variant transition-colors ${\n                              selectedEndpoint === endpoint.path ? 'bg-wazuh-primary bg-opacity-20' : ''\n                            }`}\n                            data-testid={`endpoint-${endpoint.method.toLowerCase()}-${endpoint.path.replace(/[^a-zA-Z0-9]/g, '-')}`}\n                          >\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge \n                                className={`text-xs ${\n                                  endpoint.method === 'GET' ? 'bg-blue-500 bg-opacity-20 text-blue-400' :\n                                  endpoint.method === 'POST' ? 'bg-green-500 bg-opacity-20 text-green-400' :\n                                  endpoint.method === 'PUT' ? 'bg-yellow-500 bg-opacity-20 text-yellow-400' :\n                                  'bg-red-500 bg-opacity-20 text-red-400'\n                                }`}\n                              >\n                                {endpoint.method}\n                              </Badge>\n                              <span className=\"text-xs font-mono\">{endpoint.path}</span>\n                            </div>\n                            <p className=\"text-xs text-gray-400 mt-1\">{endpoint.description}</p>\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              {/* Request Configuration */}\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"request-config\">\n                <CardHeader>\n                  <CardTitle>Request Configuration</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">HTTP Method</label>\n                    <Select value={requestMethod} onValueChange={setRequestMethod}>\n                      <SelectTrigger className=\"wazuh-surface-variant border-gray-600\" data-testid=\"select-method\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"GET\">GET</SelectItem>\n                        <SelectItem value=\"POST\">POST</SelectItem>\n                        <SelectItem value=\"PUT\">PUT</SelectItem>\n                        <SelectItem value=\"DELETE\">DELETE</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Endpoint URL</label>\n                    <Input\n                      type=\"text\"\n                      value={selectedEndpoint}\n                      onChange={(e) => setSelectedEndpoint(e.target.value)}\n                      placeholder=\"/agents\"\n                      className=\"wazuh-surface-variant border-gray-600 font-mono\"\n                      data-testid=\"input-endpoint\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Request Headers</label>\n                    <Textarea\n                      placeholder={`Content-Type: application/json\nAuthorization: Bearer YOUR_TOKEN`}\n                      className=\"wazuh-surface-variant border-gray-600 font-mono text-xs\"\n                      rows={3}\n                      data-testid=\"textarea-headers\"\n                    />\n                  </div>\n\n                  {(requestMethod === 'POST' || requestMethod === 'PUT') && (\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Request Body</label>\n                      <Textarea\n                        value={requestBody}\n                        onChange={(e) => setRequestBody(e.target.value)}\n                        placeholder='{\"name\": \"example\", \"value\": \"data\"}'\n                        className=\"wazuh-surface-variant border-gray-600 font-mono text-xs\"\n                        rows={6}\n                        data-testid=\"textarea-request-body\"\n                      />\n                    </div>\n                  )}\n\n                  <Button \n                    onClick={handleExecuteRequest}\n                    disabled={!selectedEndpoint || isLoading}\n                    className=\"w-full wazuh-primary hover:bg-blue-600\"\n                    data-testid=\"button-execute-request\"\n                  >\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    {isLoading ? 'Executing...' : 'Execute Request'}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Response */}\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"response-panel\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Response</CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      {responseStatus && (\n                        <Badge className={`text-xs ${getStatusColor(responseStatus)}`}>\n                          {responseStatus}\n                        </Badge>\n                      )}\n                      {responseData && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={handleCopyResponse}\n                          className=\"text-gray-400 hover:text-white\"\n                          data-testid=\"button-copy-response\"\n                        >\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {responseData ? (\n                    <div className=\"bg-black bg-opacity-50 p-4 rounded border\">\n                      <pre className=\"text-xs font-mono whitespace-pre-wrap overflow-x-auto\" data-testid=\"response-data\">\n                        {responseData}\n                      </pre>\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-gray-400 py-8\">\n                      <Database className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                      <p>Execute a request to see the response</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* API Reference */}\n            <Card className=\"wazuh-surface border-gray-700 mt-6\" data-testid=\"api-reference\">\n              <CardHeader>\n                <CardTitle>API Reference</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <div className=\"wazuh-surface-variant rounded p-4\">\n                    <h4 className=\"font-medium mb-2\">Authentication</h4>\n                    <p className=\"text-sm text-gray-400 mb-2\">\n                      Use JWT tokens for API authentication. Include in the Authorization header.\n                    </p>\n                    <code className=\"text-xs bg-black bg-opacity-50 p-2 rounded block\">\n                      Authorization: Bearer &lt;token&gt;\n                    </code>\n                  </div>\n                  <div className=\"wazuh-surface-variant rounded p-4\">\n                    <h4 className=\"font-medium mb-2\">Rate Limiting</h4>\n                    <p className=\"text-sm text-gray-400 mb-2\">\n                      API requests are limited to 300 requests per minute per IP address.\n                    </p>\n                    <code className=\"text-xs bg-black bg-opacity-50 p-2 rounded block\">\n                      X-RateLimit-Remaining: 299\n                    </code>\n                  </div>\n                  <div className=\"wazuh-surface-variant rounded p-4\">\n                    <h4 className=\"font-medium mb-2\">Response Format</h4>\n                    <p className=\"text-sm text-gray-400 mb-2\">\n                      All responses follow a consistent JSON structure with data and metadata.\n                    </p>\n                    <code className=\"text-xs bg-black bg-opacity-50 p-2 rounded block\">\n                      Content-Type: application/json\n                    </code>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":16782},"client/src/pages/configuration.tsx":{"content":"import { useState } from \"react\";\nimport { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Save, Settings, Database, Bell, Shield, RefreshCw } from \"lucide-react\";\n\nexport default function Configuration() {\n  const [hasChanges, setHasChanges] = useState(false);\n\n  // Configuration state\n  const [config, setConfig] = useState({\n    general: {\n      managerHost: \"wazuh-manager-01\",\n      managerPort: \"1514\",\n      logLevel: \"info\",\n      maxAgents: \"1000\",\n      alertsPerSecond: \"50\"\n    },\n    alerts: {\n      emailNotifications: true,\n      syslogOutput: false,\n      jsonOutput: true,\n      minimumSeverity: \"medium\",\n      emailRecipients: \"admin@example.com, security@example.com\"\n    },\n    security: {\n      authRequired: true,\n      maxLoginAttempts: \"5\",\n      sessionTimeout: \"30\",\n      sslEnabled: true,\n      apiRateLimit: \"100\"\n    },\n    database: {\n      host: \"localhost\",\n      port: \"5432\",\n      database: \"wazuh\",\n      username: \"wazuh_user\",\n      maxConnections: \"20\",\n      backupEnabled: true,\n      backupInterval: \"daily\"\n    }\n  });\n\n  const configSections = [\n    {\n      id: \"general\",\n      title: \"General Settings\",\n      icon: Settings,\n      description: \"Core Wazuh manager configuration settings\"\n    },\n    {\n      id: \"alerts\",\n      title: \"Alert Configuration\", \n      icon: Bell,\n      description: \"Alert generation and notification settings\"\n    },\n    {\n      id: \"security\",\n      title: \"Security Settings\",\n      icon: Shield,\n      description: \"Authentication and access control configuration\"\n    },\n    {\n      id: \"database\",\n      title: \"Database Configuration\",\n      icon: Database,\n      description: \"Database connection and management settings\"\n    }\n  ];\n\n  const handleInputChange = (section: string, field: string, value: string | boolean) => {\n    setConfig(prev => ({\n      ...prev,\n      [section]: {\n        ...prev[section as keyof typeof prev],\n        [field]: value\n      }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleSave = () => {\n    // Mock save functionality\n    console.log(\"Saving configuration:\", config);\n    setHasChanges(false);\n  };\n\n  const handleReset = () => {\n    // Mock reset functionality\n    setHasChanges(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium\" data-testid=\"configuration-title\">Configuration</h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"configuration-subtitle\">\n                  Manage Wazuh system settings and preferences\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                {hasChanges && (\n                  <Badge variant=\"outline\" className=\"text-yellow-400 border-yellow-400\">\n                    Unsaved changes\n                  </Badge>\n                )}\n                <Button \n                  variant=\"outline\" \n                  className=\"border-gray-600 hover:bg-gray-700\"\n                  onClick={handleReset}\n                  data-testid=\"button-reset-config\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Reset\n                </Button>\n                <Button \n                  className=\"wazuh-primary hover:bg-blue-600\"\n                  onClick={handleSave}\n                  disabled={!hasChanges}\n                  data-testid=\"button-save-config\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Changes\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Configuration Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n              {configSections.map((section) => (\n                <Card key={section.id} className=\"wazuh-surface border-gray-700\" data-testid={`config-section-${section.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"bg-wazuh-primary bg-opacity-20 p-2 rounded-lg\">\n                        <section.icon className=\"text-wazuh-primary w-5 h-5\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium text-sm\">{section.title}</h3>\n                        <p className=\"text-xs text-gray-400 mt-1\">{section.description}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            <Tabs defaultValue=\"general\" className=\"space-y-6\">\n              <TabsList className=\"wazuh-surface-variant\">\n                <TabsTrigger value=\"general\" data-testid=\"tab-general\">General</TabsTrigger>\n                <TabsTrigger value=\"alerts\" data-testid=\"tab-alerts\">Alerts</TabsTrigger>\n                <TabsTrigger value=\"security\" data-testid=\"tab-security\">Security</TabsTrigger>\n                <TabsTrigger value=\"database\" data-testid=\"tab-database\">Database</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"general\" className=\"space-y-6\">\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"general-config\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Settings className=\"w-5 h-5 mr-2\" />\n                      General Settings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Manager Host</label>\n                        <Input\n                          type=\"text\"\n                          value={config.general.managerHost}\n                          onChange={(e) => handleInputChange('general', 'managerHost', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-manager-host\"\n                        />\n                        <p className=\"text-xs text-gray-400 mt-1\">Hostname or IP address of the Wazuh manager</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Manager Port</label>\n                        <Input\n                          type=\"text\"\n                          value={config.general.managerPort}\n                          onChange={(e) => handleInputChange('general', 'managerPort', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-manager-port\"\n                        />\n                        <p className=\"text-xs text-gray-400 mt-1\">Port for agent communication (default: 1514)</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Log Level</label>\n                        <select \n                          value={config.general.logLevel}\n                          onChange={(e) => handleInputChange('general', 'logLevel', e.target.value)}\n                          className=\"w-full p-2 bg-wazuh-surface-variant border border-gray-600 rounded text-white\"\n                          data-testid=\"select-log-level\"\n                        >\n                          <option value=\"debug\">Debug</option>\n                          <option value=\"info\">Info</option>\n                          <option value=\"warning\">Warning</option>\n                          <option value=\"error\">Error</option>\n                        </select>\n                        <p className=\"text-xs text-gray-400 mt-1\">Minimum log level for system messages</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Max Agents</label>\n                        <Input\n                          type=\"text\"\n                          value={config.general.maxAgents}\n                          onChange={(e) => handleInputChange('general', 'maxAgents', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-max-agents\"\n                        />\n                        <p className=\"text-xs text-gray-400 mt-1\">Maximum number of agents allowed</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"alerts\" className=\"space-y-6\">\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"alerts-config\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Bell className=\"w-5 h-5 mr-2\" />\n                      Alert Configuration\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Email Notifications</label>\n                          <p className=\"text-xs text-gray-400\">Send alerts via email</p>\n                        </div>\n                        <Switch\n                          checked={config.alerts.emailNotifications}\n                          onCheckedChange={(checked) => handleInputChange('alerts', 'emailNotifications', checked)}\n                          data-testid=\"switch-email-notifications\"\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Syslog Output</label>\n                          <p className=\"text-xs text-gray-400\">Forward alerts to syslog</p>\n                        </div>\n                        <Switch\n                          checked={config.alerts.syslogOutput}\n                          onCheckedChange={(checked) => handleInputChange('alerts', 'syslogOutput', checked)}\n                          data-testid=\"switch-syslog-output\"\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <label className=\"text-sm font-medium\">JSON Output</label>\n                          <p className=\"text-xs text-gray-400\">Output alerts in JSON format</p>\n                        </div>\n                        <Switch\n                          checked={config.alerts.jsonOutput}\n                          onCheckedChange={(checked) => handleInputChange('alerts', 'jsonOutput', checked)}\n                          data-testid=\"switch-json-output\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Minimum Severity</label>\n                        <select \n                          value={config.alerts.minimumSeverity}\n                          onChange={(e) => handleInputChange('alerts', 'minimumSeverity', e.target.value)}\n                          className=\"w-full p-2 bg-wazuh-surface-variant border border-gray-600 rounded text-white\"\n                          data-testid=\"select-minimum-severity\"\n                        >\n                          <option value=\"low\">Low</option>\n                          <option value=\"medium\">Medium</option>\n                          <option value=\"high\">High</option>\n                          <option value=\"critical\">Critical</option>\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Email Recipients</label>\n                        <Textarea\n                          value={config.alerts.emailRecipients}\n                          onChange={(e) => handleInputChange('alerts', 'emailRecipients', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          rows={3}\n                          data-testid=\"textarea-email-recipients\"\n                        />\n                        <p className=\"text-xs text-gray-400 mt-1\">Comma-separated list of email addresses</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"security\" className=\"space-y-6\">\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"security-config\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Shield className=\"w-5 h-5 mr-2\" />\n                      Security Settings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Authentication Required</label>\n                          <p className=\"text-xs text-gray-400\">Require authentication for API access</p>\n                        </div>\n                        <Switch\n                          checked={config.security.authRequired}\n                          onCheckedChange={(checked) => handleInputChange('security', 'authRequired', checked)}\n                          data-testid=\"switch-auth-required\"\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <label className=\"text-sm font-medium\">SSL Enabled</label>\n                          <p className=\"text-xs text-gray-400\">Enable SSL/TLS encryption</p>\n                        </div>\n                        <Switch\n                          checked={config.security.sslEnabled}\n                          onCheckedChange={(checked) => handleInputChange('security', 'sslEnabled', checked)}\n                          data-testid=\"switch-ssl-enabled\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Max Login Attempts</label>\n                        <Input\n                          type=\"text\"\n                          value={config.security.maxLoginAttempts}\n                          onChange={(e) => handleInputChange('security', 'maxLoginAttempts', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-max-login-attempts\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Session Timeout (minutes)</label>\n                        <Input\n                          type=\"text\"\n                          value={config.security.sessionTimeout}\n                          onChange={(e) => handleInputChange('security', 'sessionTimeout', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-session-timeout\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">API Rate Limit (req/min)</label>\n                        <Input\n                          type=\"text\"\n                          value={config.security.apiRateLimit}\n                          onChange={(e) => handleInputChange('security', 'apiRateLimit', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-api-rate-limit\"\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"database\" className=\"space-y-6\">\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"database-config\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Database className=\"w-5 h-5 mr-2\" />\n                      Database Configuration\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Database Host</label>\n                        <Input\n                          type=\"text\"\n                          value={config.database.host}\n                          onChange={(e) => handleInputChange('database', 'host', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-db-host\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Database Port</label>\n                        <Input\n                          type=\"text\"\n                          value={config.database.port}\n                          onChange={(e) => handleInputChange('database', 'port', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-db-port\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Database Name</label>\n                        <Input\n                          type=\"text\"\n                          value={config.database.database}\n                          onChange={(e) => handleInputChange('database', 'database', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-db-name\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium mb-2 block\">Username</label>\n                        <Input\n                          type=\"text\"\n                          value={config.database.username}\n                          onChange={(e) => handleInputChange('database', 'username', e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600\"\n                          data-testid=\"input-db-username\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Automatic Backups</label>\n                          <p className=\"text-xs text-gray-400\">Enable automated database backups</p>\n                        </div>\n                        <Switch\n                          checked={config.database.backupEnabled}\n                          onCheckedChange={(checked) => handleInputChange('database', 'backupEnabled', checked)}\n                          data-testid=\"switch-backup-enabled\"\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <label className=\"text-sm font-medium mb-2 block\">Max Connections</label>\n                          <Input\n                            type=\"text\"\n                            value={config.database.maxConnections}\n                            onChange={(e) => handleInputChange('database', 'maxConnections', e.target.value)}\n                            className=\"wazuh-surface-variant border-gray-600\"\n                            data-testid=\"input-max-connections\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium mb-2 block\">Backup Interval</label>\n                          <select \n                            value={config.database.backupInterval}\n                            onChange={(e) => handleInputChange('database', 'backupInterval', e.target.value)}\n                            className=\"w-full p-2 bg-wazuh-surface-variant border border-gray-600 rounded text-white\"\n                            data-testid=\"select-backup-interval\"\n                          >\n                            <option value=\"hourly\">Hourly</option>\n                            <option value=\"daily\">Daily</option>\n                            <option value=\"weekly\">Weekly</option>\n                            <option value=\"monthly\">Monthly</option>\n                          </select>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":22614},"client/src/pages/dashboard.tsx":{"content":"import { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { KPICards } from \"@/components/dashboard/kpi-cards\";\nimport { AlertsChart } from \"@/components/dashboard/alerts-chart\";\nimport { VulnerabilitiesChart } from \"@/components/dashboard/vulnerabilities-chart\";\nimport { RecentAlerts } from \"@/components/dashboard/recent-alerts\";\nimport { AgentStatus } from \"@/components/dashboard/agent-status\";\nimport { MitreAttack } from \"@/components/dashboard/mitre-attack\";\nimport { ComplianceOverview } from \"@/components/dashboard/compliance-overview\";\nimport { useState } from \"react\";\nimport { Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function Dashboard() {\n  const [timeRange, setTimeRange] = useState(\"24h\");\n\n  const handleExportReport = () => {\n    // TODO: Implement report export functionality\n    console.log(\"Exporting report for time range:\", timeRange);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          {/* Header Section */}\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium\" data-testid=\"dashboard-title\">Security Overview</h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"dashboard-subtitle\">\n                  Real-time security monitoring and threat detection\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Select value={timeRange} onValueChange={setTimeRange}>\n                  <SelectTrigger className=\"w-48 wazuh-surface-variant border-gray-600\" data-testid=\"time-range-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1h\">Last 1 hour</SelectItem>\n                    <SelectItem value=\"24h\">Last 24 hours</SelectItem>\n                    <SelectItem value=\"7d\">Last 7 days</SelectItem>\n                    <SelectItem value=\"30d\">Last 30 days</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button \n                  onClick={handleExportReport}\n                  className=\"wazuh-primary hover:bg-blue-600\"\n                  data-testid=\"button-export-report\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* KPI Cards */}\n            <KPICards />\n\n            {/* Charts Row */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n              <AlertsChart />\n              <VulnerabilitiesChart />\n            </div>\n\n            {/* Recent Alerts and Agent Status */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n              <div className=\"lg:col-span-2\">\n                <RecentAlerts />\n              </div>\n              <AgentStatus />\n            </div>\n\n            {/* MITRE ATT&CK and Compliance Section */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <MitreAttack />\n              <ComplianceOverview />\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3710},"client/src/pages/file-integrity.tsx":{"content":"import { useState } from \"react\";\nimport { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Filter, Download, Shield, File, Folder, Eye, AlertTriangle } from \"lucide-react\";\n\nexport default function FileIntegrity() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [actionFilter, setActionFilter] = useState(\"all\");\n\n  // Mock data for file integrity monitoring\n  const fileChanges = [\n    {\n      id: \"1\",\n      path: \"/etc/passwd\",\n      action: \"modified\",\n      agent: \"web-server-01\",\n      timestamp: new Date(Date.now() - 300000),\n      checksum: \"a1b2c3d4...\",\n      previousChecksum: \"e5f6g7h8...\",\n      size: 2048,\n      permissions: \"644\",\n      severity: \"high\"\n    },\n    {\n      id: \"2\",\n      path: \"/var/www/html/config.php\",\n      action: \"created\",\n      agent: \"web-server-02\", \n      timestamp: new Date(Date.now() - 600000),\n      checksum: \"x9y8z7w6...\",\n      previousChecksum: null,\n      size: 1024,\n      permissions: \"644\",\n      severity: \"medium\"\n    },\n    {\n      id: \"3\",\n      path: \"/home/admin/.ssh/authorized_keys\",\n      action: \"deleted\",\n      agent: \"db-server-01\",\n      timestamp: new Date(Date.now() - 900000),\n      checksum: null,\n      previousChecksum: \"m5n4o3p2...\",\n      size: 0,\n      permissions: null,\n      severity: \"critical\"\n    }\n  ];\n\n  const monitoredPaths = [\n    { path: \"/etc\", recursive: true, enabled: true, agents: 15 },\n    { path: \"/var/log\", recursive: true, enabled: true, agents: 12 },\n    { path: \"/home\", recursive: false, enabled: true, agents: 8 },\n    { path: \"/usr/bin\", recursive: true, enabled: false, agents: 0 },\n    { path: \"/var/www\", recursive: true, enabled: true, agents: 5 }\n  ];\n\n  const getActionColor = (action: string) => {\n    switch (action) {\n      case 'created':\n        return 'bg-green-500 bg-opacity-20 text-green-400';\n      case 'modified':\n        return 'bg-yellow-500 bg-opacity-20 text-yellow-400';\n      case 'deleted':\n        return 'bg-red-500 bg-opacity-20 text-red-400';\n      default:\n        return 'bg-gray-500 bg-opacity-20 text-gray-400';\n    }\n  };\n\n  const getSeverityClass = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'severity-critical';\n      case 'high':\n        return 'severity-high';\n      case 'medium':\n        return 'severity-medium';\n      case 'low':\n        return 'severity-low';\n      default:\n        return 'severity-low';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - timestamp.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    \n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins} min ago`;\n    if (diffMins < 1440) return `${Math.floor(diffMins / 60)} hours ago`;\n    return `${Math.floor(diffMins / 1440)} days ago`;\n  };\n\n  const filteredChanges = fileChanges.filter(change => {\n    if (actionFilter !== \"all\" && change.action !== actionFilter) return false;\n    if (searchTerm) {\n      return change.path.toLowerCase().includes(searchTerm.toLowerCase()) ||\n             change.agent.toLowerCase().includes(searchTerm.toLowerCase());\n    }\n    return true;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium\" data-testid=\"file-integrity-title\">File Integrity Monitoring</h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"file-integrity-subtitle\">\n                  Monitor and detect unauthorized file system changes\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-export-report\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Summary Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-total-changes\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Total Changes</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{fileChanges.length}</p>\n                      <p className=\"text-yellow-400 text-xs mt-1\">Last 24 hours</p>\n                    </div>\n                    <Shield className=\"text-wazuh-primary w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-critical\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Critical</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-red-400\">\n                        {fileChanges.filter(c => c.severity === 'critical').length}\n                      </p>\n                    </div>\n                    <div className=\"bg-red-500 bg-opacity-20 p-2 rounded-lg\">\n                      <AlertTriangle className=\"text-red-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-monitored-paths\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Monitored Paths</p>\n                      <p className=\"text-3xl font-semibold mt-2\">\n                        {monitoredPaths.filter(p => p.enabled).length}\n                      </p>\n                    </div>\n                    <Folder className=\"text-green-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-agents-monitoring\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Agents Monitoring</p>\n                      <p className=\"text-3xl font-semibold mt-2\">\n                        {monitoredPaths.reduce((sum, p) => sum + p.agents, 0)}\n                      </p>\n                    </div>\n                    <File className=\"text-blue-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Tabs defaultValue=\"changes\" className=\"space-y-6\">\n              <TabsList className=\"wazuh-surface-variant\">\n                <TabsTrigger value=\"changes\" data-testid=\"tab-changes\">File Changes</TabsTrigger>\n                <TabsTrigger value=\"configuration\" data-testid=\"tab-configuration\">Configuration</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"changes\" className=\"space-y-6\">\n                {/* Filters */}\n                <Card className=\"wazuh-surface border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Filter className=\"w-5 h-5 mr-2\" />\n                      Filters\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex flex-wrap items-center gap-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Search className=\"w-4 h-4 text-gray-400\" />\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Search path or agent...\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600 w-64\"\n                          data-testid=\"input-search-changes\"\n                        />\n                      </div>\n                      \n                      <Select value={actionFilter} onValueChange={setActionFilter}>\n                        <SelectTrigger className=\"w-40 wazuh-surface-variant border-gray-600\" data-testid=\"select-action\">\n                          <SelectValue placeholder=\"Action\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Actions</SelectItem>\n                          <SelectItem value=\"created\">Created</SelectItem>\n                          <SelectItem value=\"modified\">Modified</SelectItem>\n                          <SelectItem value=\"deleted\">Deleted</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* File Changes Table */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"file-changes-table\">\n                  <CardHeader>\n                    <CardTitle>Recent File Changes ({filteredChanges.length})</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"wazuh-surface-variant\">\n                          <tr>\n                            <th className=\"text-left p-4 font-medium text-sm\">Path</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Action</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Agent</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Severity</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Size</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Time</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {filteredChanges.map((change) => (\n                            <tr \n                              key={change.id} \n                              className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                              data-testid={`change-row-${change.id}`}\n                            >\n                              <td className=\"p-4\">\n                                <div className=\"font-mono text-sm text-blue-400\" data-testid={`change-path-${change.id}`}>\n                                  {change.path}\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge className={`text-xs ${getActionColor(change.action)}`}>\n                                  {change.action}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4 text-sm\" data-testid={`change-agent-${change.id}`}>\n                                {change.agent}\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge className={`text-xs ${getSeverityClass(change.severity)}`}>\n                                  {change.severity}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4 text-sm text-gray-400\" data-testid={`change-size-${change.id}`}>\n                                {change.size > 0 ? `${change.size} bytes` : '-'}\n                              </td>\n                              <td className=\"p-4 text-sm text-gray-400\" data-testid={`change-time-${change.id}`}>\n                                {formatTimeAgo(change.timestamp)}\n                              </td>\n                              <td className=\"p-4\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                  data-testid={`button-view-${change.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4 mr-1\" />\n                                  Details\n                                </Button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"configuration\" className=\"space-y-6\">\n                {/* Monitored Paths */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"monitored-paths-table\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle>Monitored Paths</CardTitle>\n                      <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-add-path\">\n                        Add Path\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"wazuh-surface-variant\">\n                          <tr>\n                            <th className=\"text-left p-4 font-medium text-sm\">Path</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Recursive</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Agents</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {monitoredPaths.map((path, index) => (\n                            <tr \n                              key={index} \n                              className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                              data-testid={`path-row-${index}`}\n                            >\n                              <td className=\"p-4\">\n                                <div className=\"font-mono text-sm text-blue-400\" data-testid={`path-name-${index}`}>\n                                  {path.path}\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge variant={path.recursive ? \"default\" : \"secondary\"} className=\"text-xs\">\n                                  {path.recursive ? \"Yes\" : \"No\"}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge \n                                  variant={path.enabled ? \"default\" : \"secondary\"}\n                                  className={`text-xs ${path.enabled ? 'bg-green-500 bg-opacity-20 text-green-400' : 'bg-gray-500 bg-opacity-20 text-gray-400'}`}\n                                >\n                                  {path.enabled ? \"Enabled\" : \"Disabled\"}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4 text-sm\" data-testid={`path-agents-${index}`}>\n                                {path.agents} agents\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                    data-testid={`button-edit-${index}`}\n                                  >\n                                    Edit\n                                  </Button>\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    className=\"text-red-400 hover:bg-red-500 hover:text-white\"\n                                    data-testid={`button-delete-${index}`}\n                                  >\n                                    Delete\n                                  </Button>\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":18322},"client/src/pages/gdpr.tsx":{"content":"import { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Download, UserCheck, CheckCircle, XCircle, AlertTriangle, Eye, Shield } from \"lucide-react\";\n\nexport default function Gdpr() {\n  // GDPR Articles and compliance status\n  const gdprArticles = [\n    { \n      id: \"6\", \n      title: \"Lawfulness of processing\",\n      status: \"pass\",\n      details: \"Legal basis documented for all data processing activities\",\n      compliance: 95\n    },\n    { \n      id: \"7\", \n      title: \"Conditions for consent\",\n      status: \"pass\",\n      details: \"Consent mechanisms properly implemented and documented\",\n      compliance: 92\n    },\n    { \n      id: \"12\", \n      title: \"Transparent information and communication\",\n      status: \"pass\",\n      details: \"Privacy notices clear and accessible to data subjects\",\n      compliance: 88\n    },\n    { \n      id: \"15\", \n      title: \"Right of access by the data subject\",\n      status: \"pass\",\n      details: \"Subject access request procedures implemented\",\n      compliance: 90\n    },\n    { \n      id: \"17\", \n      title: \"Right to erasure ('right to be forgotten')\",\n      status: \"fail\",\n      details: \"Data deletion processes need automation improvements\",\n      compliance: 65\n    },\n    { \n      id: \"25\", \n      title: \"Data protection by design and by default\",\n      status: \"pass\",\n      details: \"Privacy considerations integrated into system design\",\n      compliance: 85\n    },\n    { \n      id: \"32\", \n      title: \"Security of processing\",\n      status: \"pass\",\n      details: \"Technical and organizational security measures in place\",\n      compliance: 94\n    },\n    { \n      id: \"33\", \n      title: \"Notification of a personal data breach to the supervisory authority\",\n      status: \"pass\",\n      details: \"Breach notification procedures established and tested\",\n      compliance: 89\n    },\n    { \n      id: \"34\", \n      title: \"Communication of a personal data breach to the data subject\",\n      status: \"fail\",\n      details: \"Data subject notification process requires enhancement\",\n      compliance: 70\n    },\n    { \n      id: \"35\", \n      title: \"Data protection impact assessment\",\n      status: \"pass\",\n      details: \"DPIA process documented and regularly conducted\",\n      compliance: 91\n    }\n  ];\n\n  const dataProcessingActivities = [\n    {\n      id: \"1\",\n      purpose: \"Customer Account Management\",\n      legalBasis: \"Contract\",\n      dataTypes: \"Name, Email, Phone, Address\",\n      retention: \"7 years after account closure\",\n      dataSubjects: \"Customers\",\n      status: \"compliant\"\n    },\n    {\n      id: \"2\", \n      purpose: \"Marketing Communications\",\n      legalBasis: \"Consent\",\n      dataTypes: \"Email, Name, Preferences\",\n      retention: \"Until consent withdrawn\",\n      dataSubjects: \"Subscribers\",\n      status: \"compliant\"\n    },\n    {\n      id: \"3\",\n      purpose: \"Security Monitoring\",\n      legalBasis: \"Legitimate Interest\",\n      dataTypes: \"IP Address, Access Logs\",\n      retention: \"12 months\",\n      dataSubjects: \"All Users\",\n      status: \"review_required\"\n    },\n    {\n      id: \"4\",\n      purpose: \"Employee Records\",\n      legalBasis: \"Legal Obligation\",\n      dataTypes: \"Personal Details, Employment History\",\n      retention: \"6 years after employment\",\n      dataSubjects: \"Employees\",\n      status: \"compliant\"\n    }\n  ];\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pass':\n      case 'compliant':\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case 'fail':\n        return <XCircle className=\"w-5 h-5 text-red-400\" />;\n      case 'review_required':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />;\n      default:\n        return <AlertTriangle className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pass':\n      case 'compliant':\n        return 'bg-green-400 bg-opacity-20 text-green-400';\n      case 'fail':\n        return 'bg-red-400 bg-opacity-20 text-red-400';\n      case 'review_required':\n        return 'bg-yellow-400 bg-opacity-20 text-yellow-400';\n      default:\n        return 'bg-gray-400 bg-opacity-20 text-gray-400';\n    }\n  };\n\n  const passedArticles = gdprArticles.filter(a => a.status === 'pass').length;\n  const failedArticles = gdprArticles.filter(a => a.status === 'fail').length;\n  const totalCompliance = Math.round(gdprArticles.reduce((sum, a) => sum + a.compliance, 0) / gdprArticles.length);\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium flex items-center\" data-testid=\"gdpr-title\">\n                  <UserCheck className=\"w-8 h-8 text-wazuh-primary mr-3\" />\n                  GDPR Compliance\n                </h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"gdpr-subtitle\">\n                  General Data Protection Regulation\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-export-gdpr-report\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Compliance Summary */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-compliance\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Overall Compliance</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{totalCompliance}%</p>\n                      <div className=\"mt-2\">\n                        <Progress value={totalCompliance} className=\"h-2\" />\n                      </div>\n                    </div>\n                    <div className=\"bg-green-400 bg-opacity-20 p-3 rounded-lg\">\n                      <UserCheck className=\"text-green-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-articles-passed\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Articles Compliant</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-green-400\">{passedArticles}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Out of {gdprArticles.length}</p>\n                    </div>\n                    <CheckCircle className=\"text-green-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-articles-failed\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Non-Compliant</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-red-400\">{failedArticles}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Require attention</p>\n                    </div>\n                    <XCircle className=\"text-red-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-data-processing\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Processing Activities</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{dataProcessingActivities.length}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Documented</p>\n                    </div>\n                    <Shield className=\"text-blue-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Tabs defaultValue=\"articles\" className=\"space-y-6\">\n              <TabsList className=\"wazuh-surface-variant\">\n                <TabsTrigger value=\"articles\" data-testid=\"tab-articles\">Articles Compliance</TabsTrigger>\n                <TabsTrigger value=\"processing\" data-testid=\"tab-processing\">Data Processing</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"articles\" className=\"space-y-6\">\n                {/* GDPR Articles Table */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"articles-table\">\n                  <CardHeader>\n                    <CardTitle>GDPR Articles Assessment</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"wazuh-surface-variant\">\n                          <tr>\n                            <th className=\"text-left p-4 font-medium text-sm\">Article</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Title</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Compliance</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {gdprArticles.map((article) => (\n                            <tr \n                              key={article.id} \n                              className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                              data-testid={`article-row-${article.id}`}\n                            >\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  {getStatusIcon(article.status)}\n                                  <span className=\"font-medium\" data-testid={`article-id-${article.id}`}>\n                                    Article {article.id}\n                                  </span>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"max-w-md\">\n                                  <div className=\"text-sm font-medium\" data-testid={`article-title-${article.id}`}>\n                                    {article.title}\n                                  </div>\n                                  <div className=\"text-xs text-gray-400 mt-1\" data-testid={`article-details-${article.id}`}>\n                                    {article.details}\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge className={`text-xs ${getStatusColor(article.status)}`}>\n                                  {article.status === 'pass' ? 'COMPLIANT' : 'NON-COMPLIANT'}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"text-sm\" data-testid={`article-compliance-${article.id}`}>\n                                    {article.compliance}%\n                                  </span>\n                                  <div className=\"w-16\">\n                                    <Progress value={article.compliance} className=\"h-2\" />\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                  data-testid={`button-view-${article.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4 mr-1\" />\n                                  Details\n                                </Button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"processing\" className=\"space-y-6\">\n                {/* Data Processing Activities */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"processing-table\">\n                  <CardHeader>\n                    <CardTitle>Data Processing Activities</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"wazuh-surface-variant\">\n                          <tr>\n                            <th className=\"text-left p-4 font-medium text-sm\">Purpose</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Legal Basis</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Data Types</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Retention</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {dataProcessingActivities.map((activity) => (\n                            <tr \n                              key={activity.id} \n                              className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                              data-testid={`processing-row-${activity.id}`}\n                            >\n                              <td className=\"p-4\">\n                                <div className=\"text-sm font-medium\" data-testid={`processing-purpose-${activity.id}`}>\n                                  {activity.purpose}\n                                </div>\n                                <div className=\"text-xs text-gray-400\" data-testid={`processing-subjects-${activity.id}`}>\n                                  {activity.dataSubjects}\n                                </div>\n                              </td>\n                              <td className=\"p-4 text-sm\" data-testid={`processing-legal-basis-${activity.id}`}>\n                                {activity.legalBasis}\n                              </td>\n                              <td className=\"p-4 text-sm text-gray-300\" data-testid={`processing-data-types-${activity.id}`}>\n                                {activity.dataTypes}\n                              </td>\n                              <td className=\"p-4 text-sm text-gray-400\" data-testid={`processing-retention-${activity.id}`}>\n                                {activity.retention}\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge className={`text-xs ${getStatusColor(activity.status)}`}>\n                                  {activity.status.replace('_', ' ').toUpperCase()}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                  data-testid={`button-view-processing-${activity.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4 mr-1\" />\n                                  Details\n                                </Button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":17752},"client/src/pages/hipaa.tsx":{"content":"import { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Download, Hospital, CheckCircle, XCircle, AlertTriangle, Eye, Shield } from \"lucide-react\";\n\nexport default function Hipaa() {\n  // HIPAA Safeguards and compliance status\n  const hipaaSafeguards = [\n    {\n      category: \"Administrative Safeguards\",\n      requirements: [\n        { id: \"164.308(a)(1)\", title: \"Assigned Security Responsibility\", status: \"pass\", compliance: 100 },\n        { id: \"164.308(a)(2)\", title: \"Workforce Training\", status: \"pass\", compliance: 95 },\n        { id: \"164.308(a)(3)\", title: \"Information Access Management\", status: \"pass\", compliance: 92 },\n        { id: \"164.308(a)(4)\", title: \"Information System Activity Review\", status: \"pass\", compliance: 88 },\n        { id: \"164.308(a)(5)\", title: \"Security Awareness and Training\", status: \"fail\", compliance: 70 },\n        { id: \"164.308(a)(6)\", title: \"Security Incident Procedures\", status: \"pass\", compliance: 85 },\n        { id: \"164.308(a)(7)\", title: \"Contingency Plan\", status: \"pass\", compliance: 90 },\n        { id: \"164.308(a)(8)\", title: \"Evaluation\", status: \"pass\", compliance: 87 }\n      ]\n    },\n    {\n      category: \"Physical Safeguards\", \n      requirements: [\n        { id: \"164.310(a)(1)\", title: \"Facility Access Controls\", status: \"pass\", compliance: 95 },\n        { id: \"164.310(a)(2)\", title: \"Workstation Use\", status: \"pass\", compliance: 90 },\n        { id: \"164.310(b)\", title: \"Workstation Security\", status: \"pass\", compliance: 88 },\n        { id: \"164.310(c)\", title: \"Device and Media Controls\", status: \"fail\", compliance: 75 }\n      ]\n    },\n    {\n      category: \"Technical Safeguards\",\n      requirements: [\n        { id: \"164.312(a)(1)\", title: \"Access Control\", status: \"pass\", compliance: 93 },\n        { id: \"164.312(b)\", title: \"Audit Controls\", status: \"pass\", compliance: 96 },\n        { id: \"164.312(c)(1)\", title: \"Integrity\", status: \"pass\", compliance: 89 },\n        { id: \"164.312(d)\", title: \"Person or Entity Authentication\", status: \"pass\", compliance: 94 },\n        { id: \"164.312(e)(1)\", title: \"Transmission Security\", status: \"pass\", compliance: 91 }\n      ]\n    }\n  ];\n\n  const phiHandling = [\n    {\n      id: \"1\",\n      dataType: \"Patient Medical Records\",\n      location: \"Primary Database\", \n      encryption: \"AES-256\",\n      accessControls: \"Role-based access control\",\n      backupStatus: \"Encrypted daily backups\",\n      status: \"compliant\"\n    },\n    {\n      id: \"2\",\n      dataType: \"Patient Contact Information\",\n      location: \"CRM System\",\n      encryption: \"AES-256\", \n      accessControls: \"Multi-factor authentication\",\n      backupStatus: \"Encrypted daily backups\",\n      status: \"compliant\"\n    },\n    {\n      id: \"3\",\n      dataType: \"Diagnostic Images\",\n      location: \"Image Archive\",\n      encryption: \"AES-256\",\n      accessControls: \"Limited access by role\",\n      backupStatus: \"Requires review\",\n      status: \"review_required\"\n    },\n    {\n      id: \"4\",\n      dataType: \"Treatment History\",\n      location: \"Analytics Database\",\n      encryption: \"AES-256\",\n      accessControls: \"Audit logging enabled\",\n      backupStatus: \"Encrypted daily backups\", \n      status: \"compliant\"\n    }\n  ];\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pass':\n      case 'compliant':\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case 'fail':\n        return <XCircle className=\"w-5 h-5 text-red-400\" />;\n      case 'review_required':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />;\n      default:\n        return <AlertTriangle className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pass':\n      case 'compliant':\n        return 'bg-green-400 bg-opacity-20 text-green-400';\n      case 'fail':\n        return 'bg-red-400 bg-opacity-20 text-red-400';\n      case 'review_required':\n        return 'bg-yellow-400 bg-opacity-20 text-yellow-400';\n      default:\n        return 'bg-gray-400 bg-opacity-20 text-gray-400';\n    }\n  };\n\n  const allRequirements = hipaaSafeguards.flatMap(category => category.requirements);\n  const passedRequirements = allRequirements.filter(r => r.status === 'pass').length;\n  const failedRequirements = allRequirements.filter(r => r.status === 'fail').length;\n  const totalCompliance = Math.round(allRequirements.reduce((sum, r) => sum + r.compliance, 0) / allRequirements.length);\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium flex items-center\" data-testid=\"hipaa-title\">\n                  <Hospital className=\"w-8 h-8 text-wazuh-primary mr-3\" />\n                  HIPAA Compliance\n                </h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"hipaa-subtitle\">\n                  Health Insurance Portability and Accountability Act\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-export-hipaa-report\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Compliance Summary */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-compliance\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Overall Compliance</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{totalCompliance}%</p>\n                      <div className=\"mt-2\">\n                        <Progress value={totalCompliance} className=\"h-2\" />\n                      </div>\n                    </div>\n                    <div className=\"bg-green-400 bg-opacity-20 p-3 rounded-lg\">\n                      <Hospital className=\"text-green-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-passed\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Compliant Safeguards</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-green-400\">{passedRequirements}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Out of {allRequirements.length}</p>\n                    </div>\n                    <CheckCircle className=\"text-green-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-failed\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Non-Compliant</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-red-400\">{failedRequirements}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Require attention</p>\n                    </div>\n                    <XCircle className=\"text-red-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-phi-types\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">PHI Data Types</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{phiHandling.length}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Protected</p>\n                    </div>\n                    <Shield className=\"text-blue-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Tabs defaultValue=\"safeguards\" className=\"space-y-6\">\n              <TabsList className=\"wazuh-surface-variant\">\n                <TabsTrigger value=\"safeguards\" data-testid=\"tab-safeguards\">Safeguards</TabsTrigger>\n                <TabsTrigger value=\"phi\" data-testid=\"tab-phi\">PHI Handling</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"safeguards\" className=\"space-y-6\">\n                {/* HIPAA Safeguards */}\n                {hipaaSafeguards.map((category) => (\n                  <Card key={category.category} className=\"wazuh-surface border-gray-700\" data-testid={`safeguard-category-${category.category.replace(' ', '-').toLowerCase()}`}>\n                    <CardHeader>\n                      <CardTitle>{category.category}</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"p-0\">\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full\">\n                          <thead className=\"wazuh-surface-variant\">\n                            <tr>\n                              <th className=\"text-left p-4 font-medium text-sm\">Requirement</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Title</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Compliance</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {category.requirements.map((requirement) => (\n                              <tr \n                                key={requirement.id} \n                                className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                                data-testid={`requirement-row-${requirement.id}`}\n                              >\n                                <td className=\"p-4\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    {getStatusIcon(requirement.status)}\n                                    <span className=\"font-mono text-sm\" data-testid={`requirement-id-${requirement.id}`}>\n                                      {requirement.id}\n                                    </span>\n                                  </div>\n                                </td>\n                                <td className=\"p-4\">\n                                  <div className=\"text-sm font-medium\" data-testid={`requirement-title-${requirement.id}`}>\n                                    {requirement.title}\n                                  </div>\n                                </td>\n                                <td className=\"p-4\">\n                                  <Badge className={`text-xs ${getStatusColor(requirement.status)}`}>\n                                    {requirement.status === 'pass' ? 'COMPLIANT' : 'NON-COMPLIANT'}\n                                  </Badge>\n                                </td>\n                                <td className=\"p-4\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    <span className=\"text-sm\" data-testid={`requirement-compliance-${requirement.id}`}>\n                                      {requirement.compliance}%\n                                    </span>\n                                    <div className=\"w-16\">\n                                      <Progress value={requirement.compliance} className=\"h-2\" />\n                                    </div>\n                                  </div>\n                                </td>\n                                <td className=\"p-4\">\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                    data-testid={`button-view-${requirement.id}`}\n                                  >\n                                    <Eye className=\"w-4 h-4 mr-1\" />\n                                    Details\n                                  </Button>\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </TabsContent>\n\n              <TabsContent value=\"phi\" className=\"space-y-6\">\n                {/* PHI Handling */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"phi-table\">\n                  <CardHeader>\n                    <CardTitle>Protected Health Information (PHI) Handling</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"wazuh-surface-variant\">\n                          <tr>\n                            <th className=\"text-left p-4 font-medium text-sm\">Data Type</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Location</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Encryption</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Access Controls</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Backup Status</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {phiHandling.map((phi) => (\n                            <tr \n                              key={phi.id} \n                              className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                              data-testid={`phi-row-${phi.id}`}\n                            >\n                              <td className=\"p-4\">\n                                <div className=\"text-sm font-medium\" data-testid={`phi-data-type-${phi.id}`}>\n                                  {phi.dataType}\n                                </div>\n                              </td>\n                              <td className=\"p-4 text-sm\" data-testid={`phi-location-${phi.id}`}>\n                                {phi.location}\n                              </td>\n                              <td className=\"p-4 text-sm\" data-testid={`phi-encryption-${phi.id}`}>\n                                {phi.encryption}\n                              </td>\n                              <td className=\"p-4 text-sm text-gray-300\" data-testid={`phi-access-controls-${phi.id}`}>\n                                {phi.accessControls}\n                              </td>\n                              <td className=\"p-4 text-sm text-gray-400\" data-testid={`phi-backup-status-${phi.id}`}>\n                                {phi.backupStatus}\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge className={`text-xs ${getStatusColor(phi.status)}`}>\n                                  {phi.status.replace('_', ' ').toUpperCase()}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                  data-testid={`button-view-phi-${phi.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4 mr-1\" />\n                                  Details\n                                </Button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":17710},"client/src/pages/mitre-attack.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Filter, Download, Target, Eye, ExternalLink } from \"lucide-react\";\nimport type { MitreAttackData } from \"@shared/schema\";\n\nexport default function MitreAttack() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [tacticFilter, setTacticFilter] = useState(\"all\");\n  \n  const { data: mitreData, isLoading } = useQuery<MitreAttackData[]>({\n    queryKey: [\"/api/mitre-attack\"],\n    refetchInterval: 30000,\n  });\n\n  // Extended MITRE ATT&CK data with tactics\n  const mitreMatrix = [\n    {\n      tactic: \"Initial Access\",\n      techniques: [\n        { id: \"T1190\", name: \"Exploit Public-Facing Application\", alerts: 8 },\n        { id: \"T1566\", name: \"Phishing\", alerts: 12 },\n        { id: \"T1078\", name: \"Valid Accounts\", alerts: 5 }\n      ]\n    },\n    {\n      tactic: \"Execution\", \n      techniques: [\n        { id: \"T1059\", name: \"Command and Scripting Interpreter\", alerts: 15 },\n        { id: \"T1053\", name: \"Scheduled Task/Job\", alerts: 6 },\n        { id: \"T1569\", name: \"System Services\", alerts: 3 }\n      ]\n    },\n    {\n      tactic: \"Persistence\",\n      techniques: [\n        { id: \"T1547\", name: \"Boot or Logon Autostart Execution\", alerts: 4 },\n        { id: \"T1543\", name: \"Create or Modify System Process\", alerts: 7 },\n        { id: \"T1546\", name: \"Event Triggered Execution\", alerts: 2 }\n      ]\n    },\n    {\n      tactic: \"Privilege Escalation\",\n      techniques: [\n        { id: \"T1068\", name: \"Exploitation for Privilege Escalation\", alerts: 9 },\n        { id: \"T1548\", name: \"Abuse Elevation Control Mechanism\", alerts: 3 },\n        { id: \"T1055\", name: \"Process Injection\", alerts: 11 }\n      ]\n    },\n    {\n      tactic: \"Defense Evasion\",\n      techniques: [\n        { id: \"T1070\", name: \"Indicator Removal\", alerts: 13 },\n        { id: \"T1027\", name: \"Obfuscated Files or Information\", alerts: 8 },\n        { id: \"T1562\", name: \"Impair Defenses\", alerts: 5 }\n      ]\n    },\n    {\n      tactic: \"Credential Access\",\n      techniques: [\n        { id: \"T1110\", name: \"Brute Force\", alerts: 18 },\n        { id: \"T1003\", name: \"OS Credential Dumping\", alerts: 6 },\n        { id: \"T1552\", name: \"Unsecured Credentials\", alerts: 4 }\n      ]\n    }\n  ];\n\n  const getSeverityBadge = (alertCount: number) => {\n    if (alertCount >= 15) return { className: \"severity-critical\", label: `${alertCount} alerts` };\n    if (alertCount >= 10) return { className: \"severity-high\", label: `${alertCount} alerts` };\n    if (alertCount >= 5) return { className: \"severity-medium\", label: `${alertCount} alerts` };\n    if (alertCount >= 1) return { className: \"severity-low\", label: `${alertCount} alert${alertCount > 1 ? 's' : ''}` };\n    return { className: \"bg-gray-500 bg-opacity-20 text-gray-400\", label: \"No alerts\" };\n  };\n\n  const filteredMatrix = mitreMatrix.filter(tactic => {\n    if (tacticFilter !== \"all\" && tactic.tactic !== tacticFilter) return false;\n    if (searchTerm) {\n      return tactic.tactic.toLowerCase().includes(searchTerm.toLowerCase()) ||\n             tactic.techniques.some(t => \n               t.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n               t.id.toLowerCase().includes(searchTerm.toLowerCase())\n             );\n    }\n    return true;\n  });\n\n  const totalAlerts = mitreMatrix.reduce((sum, tactic) => \n    sum + tactic.techniques.reduce((tacticSum, technique) => tacticSum + technique.alerts, 0), 0\n  );\n\n  const topTechniques = mitreMatrix\n    .flatMap(tactic => tactic.techniques.map(technique => ({ ...technique, tactic: tactic.tactic })))\n    .sort((a, b) => b.alerts - a.alerts)\n    .slice(0, 10);\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium\" data-testid=\"mitre-title\">MITRE ATT&CK Framework</h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"mitre-subtitle\">\n                  Track adversary tactics, techniques, and procedures\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button \n                  variant=\"outline\" \n                  className=\"border-gray-600 hover:bg-gray-700\"\n                  data-testid=\"button-view-matrix\"\n                >\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  View Full Matrix\n                </Button>\n                <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-export-report\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Summary Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-total-alerts\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Total MITRE Alerts</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{totalAlerts}</p>\n                      <p className=\"text-yellow-400 text-xs mt-1\">Last 30 days</p>\n                    </div>\n                    <Target className=\"text-wazuh-primary w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-tactics\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Active Tactics</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{mitreMatrix.length}</p>\n                      <p className=\"text-green-400 text-xs mt-1\">Out of 14 total</p>\n                    </div>\n                    <div className=\"bg-green-400 bg-opacity-20 p-2 rounded-lg\">\n                      <Target className=\"text-green-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-techniques\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Techniques Detected</p>\n                      <p className=\"text-3xl font-semibold mt-2\">\n                        {mitreMatrix.reduce((sum, tactic) => sum + tactic.techniques.length, 0)}\n                      </p>\n                      <p className=\"text-blue-400 text-xs mt-1\">Unique techniques</p>\n                    </div>\n                    <div className=\"bg-blue-500 bg-opacity-20 p-2 rounded-lg\">\n                      <Target className=\"text-blue-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-critical\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">High Activity</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-red-400\">\n                        {topTechniques.filter(t => t.alerts >= 15).length}\n                      </p>\n                      <p className=\"text-red-400 text-xs mt-1\">Techniques ≥15 alerts</p>\n                    </div>\n                    <div className=\"bg-red-500 bg-opacity-20 p-2 rounded-lg\">\n                      <Target className=\"text-red-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Tabs defaultValue=\"matrix\" className=\"space-y-6\">\n              <TabsList className=\"wazuh-surface-variant\">\n                <TabsTrigger value=\"matrix\" data-testid=\"tab-matrix\">Attack Matrix</TabsTrigger>\n                <TabsTrigger value=\"techniques\" data-testid=\"tab-techniques\">Top Techniques</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"matrix\" className=\"space-y-6\">\n                {/* Filters */}\n                <Card className=\"wazuh-surface border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Filter className=\"w-5 h-5 mr-2\" />\n                      Filters\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex flex-wrap items-center gap-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Search className=\"w-4 h-4 text-gray-400\" />\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Search tactics or techniques...\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"wazuh-surface-variant border-gray-600 w-64\"\n                          data-testid=\"input-search-mitre\"\n                        />\n                      </div>\n                      \n                      <Select value={tacticFilter} onValueChange={setTacticFilter}>\n                        <SelectTrigger className=\"w-48 wazuh-surface-variant border-gray-600\" data-testid=\"select-tactic\">\n                          <SelectValue placeholder=\"Select Tactic\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Tactics</SelectItem>\n                          {mitreMatrix.map(tactic => (\n                            <SelectItem key={tactic.tactic} value={tactic.tactic}>\n                              {tactic.tactic}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* MITRE ATT&CK Matrix */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                  {filteredMatrix.map((tactic) => (\n                    <Card key={tactic.tactic} className=\"wazuh-surface border-gray-700\" data-testid={`tactic-card-${tactic.tactic}`}>\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-lg flex items-center justify-between\">\n                          <span>{tactic.tactic}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {tactic.techniques.length} techniques\n                          </Badge>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        {tactic.techniques.map((technique) => {\n                          const badge = getSeverityBadge(technique.alerts);\n                          return (\n                            <div \n                              key={technique.id}\n                              className=\"wazuh-surface-variant rounded p-3 hover:bg-opacity-80 transition-colors cursor-pointer\"\n                              data-testid={`technique-card-${technique.id}`}\n                            >\n                              <div className=\"flex items-start justify-between mb-2\">\n                                <div className=\"flex-1\">\n                                  <div className=\"font-medium text-sm\" data-testid={`technique-name-${technique.id}`}>\n                                    {technique.name}\n                                  </div>\n                                  <div className=\"text-xs text-gray-400 font-mono\" data-testid={`technique-id-${technique.id}`}>\n                                    {technique.id}\n                                  </div>\n                                </div>\n                                <Badge className={`text-xs ml-2 ${badge.className}`}>\n                                  {badge.label}\n                                </Badge>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"techniques\" className=\"space-y-6\">\n                {/* Top Techniques Table */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"top-techniques-table\">\n                  <CardHeader>\n                    <CardTitle>Top Techniques by Alert Count</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"wazuh-surface-variant\">\n                          <tr>\n                            <th className=\"text-left p-4 font-medium text-sm\">Rank</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Technique ID</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Name</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Tactic</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Alerts</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {topTechniques.map((technique, index) => {\n                            const badge = getSeverityBadge(technique.alerts);\n                            return (\n                              <tr \n                                key={technique.id} \n                                className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                                data-testid={`top-technique-row-${technique.id}`}\n                              >\n                                <td className=\"p-4 font-medium text-wazuh-primary\">\n                                  #{index + 1}\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"font-mono text-sm text-blue-400\" data-testid={`top-technique-id-${technique.id}`}>\n                                    {technique.id}\n                                  </span>\n                                </td>\n                                <td className=\"p-4 text-sm\" data-testid={`top-technique-name-${technique.id}`}>\n                                  {technique.name}\n                                </td>\n                                <td className=\"p-4 text-sm text-gray-400\" data-testid={`top-technique-tactic-${technique.id}`}>\n                                  {technique.tactic}\n                                </td>\n                                <td className=\"p-4\">\n                                  <Badge className={`text-xs ${badge.className}`}>\n                                    {technique.alerts} alerts\n                                  </Badge>\n                                </td>\n                                <td className=\"p-4\">\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                    data-testid={`button-view-${technique.id}`}\n                                  >\n                                    <Eye className=\"w-4 h-4 mr-1\" />\n                                    View Alerts\n                                  </Button>\n                                </td>\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":17454},"client/src/pages/nist.tsx":{"content":"import { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Download, Bookmark, CheckCircle, XCircle, AlertTriangle, Eye, Shield } from \"lucide-react\";\n\nexport default function Nist() {\n  // NIST 800-53 Control Families\n  const nistControlFamilies = [\n    {\n      id: \"AC\",\n      name: \"Access Control\",\n      controls: 25,\n      implemented: 22,\n      compliance: 88,\n      status: \"pass\"\n    },\n    {\n      id: \"AU\", \n      name: \"Audit and Accountability\",\n      controls: 16,\n      implemented: 15,\n      compliance: 94,\n      status: \"pass\"\n    },\n    {\n      id: \"CA\",\n      name: \"Assessment, Authorization, and Monitoring\",\n      controls: 9,\n      implemented: 7,\n      compliance: 78,\n      status: \"fail\"\n    },\n    {\n      id: \"CM\",\n      name: \"Configuration Management\",\n      controls: 14,\n      implemented: 12,\n      compliance: 86,\n      status: \"pass\"\n    },\n    {\n      id: \"CP\",\n      name: \"Contingency Planning\",\n      controls: 13,\n      implemented: 10,\n      compliance: 77,\n      status: \"fail\"\n    },\n    {\n      id: \"IA\",\n      name: \"Identification and Authentication\",\n      controls: 12,\n      implemented: 11,\n      compliance: 92,\n      status: \"pass\"\n    },\n    {\n      id: \"IR\",\n      name: \"Incident Response\",\n      controls: 10,\n      implemented: 9,\n      compliance: 90,\n      status: \"pass\"\n    },\n    {\n      id: \"RA\",\n      name: \"Risk Assessment\",\n      controls: 10,\n      implemented: 8,\n      compliance: 80,\n      status: \"pass\"\n    },\n    {\n      id: \"SA\",\n      name: \"System and Services Acquisition\",\n      controls: 23,\n      implemented: 18,\n      compliance: 78,\n      status: \"fail\"\n    },\n    {\n      id: \"SC\",\n      name: \"System and Communications Protection\",\n      controls: 51,\n      implemented: 45,\n      compliance: 88,\n      status: \"pass\"\n    },\n    {\n      id: \"SI\",\n      name: \"System and Information Integrity\",\n      controls: 23,\n      implemented: 20,\n      compliance: 87,\n      status: \"pass\"\n    }\n  ];\n\n  const highPriorityControls = [\n    {\n      id: \"AC-2\",\n      name: \"Account Management\",\n      family: \"Access Control\",\n      priority: \"High\",\n      status: \"pass\",\n      implementation: \"Automated account provisioning and deprovisioning\",\n      compliance: 95\n    },\n    {\n      id: \"AU-6\",\n      name: \"Audit Record Review, Analysis, and Reporting\",\n      family: \"Audit and Accountability\", \n      priority: \"High\",\n      status: \"pass\",\n      implementation: \"SIEM-based automated audit review\",\n      compliance: 92\n    },\n    {\n      id: \"CA-7\",\n      name: \"Continuous Monitoring\",\n      family: \"Assessment, Authorization, and Monitoring\",\n      priority: \"High\",\n      status: \"fail\",\n      implementation: \"Requires additional monitoring tools\",\n      compliance: 65\n    },\n    {\n      id: \"IA-2\",\n      name: \"Identification and Authentication (Organizational Users)\",\n      family: \"Identification and Authentication\",\n      priority: \"High\", \n      status: \"pass\",\n      implementation: \"Multi-factor authentication implemented\",\n      compliance: 98\n    },\n    {\n      id: \"IR-4\",\n      name: \"Incident Handling\",\n      family: \"Incident Response\",\n      priority: \"High\",\n      status: \"pass\",\n      implementation: \"24/7 incident response team\",\n      compliance: 89\n    },\n    {\n      id: \"SC-7\",\n      name: \"Boundary Protection\",\n      family: \"System and Communications Protection\",\n      priority: \"High\",\n      status: \"pass\",\n      implementation: \"Next-generation firewalls and DLP\",\n      compliance: 91\n    },\n    {\n      id: \"SI-4\",\n      name: \"System Monitoring\",\n      family: \"System and Information Integrity\",\n      priority: \"High\",\n      status: \"pass\",\n      implementation: \"Real-time system monitoring\",\n      compliance: 94\n    }\n  ];\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pass':\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case 'fail':\n        return <XCircle className=\"w-5 h-5 text-red-400\" />;\n      case 'partial':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />;\n      default:\n        return <AlertTriangle className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pass':\n        return 'bg-green-400 bg-opacity-20 text-green-400';\n      case 'fail':\n        return 'bg-red-400 bg-opacity-20 text-red-400';\n      case 'partial':\n        return 'bg-yellow-400 bg-opacity-20 text-yellow-400';\n      default:\n        return 'bg-gray-400 bg-opacity-20 text-gray-400';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'High':\n        return 'bg-red-500 bg-opacity-20 text-red-400';\n      case 'Medium':\n        return 'bg-yellow-500 bg-opacity-20 text-yellow-400';\n      case 'Low':\n        return 'bg-green-500 bg-opacity-20 text-green-400';\n      default:\n        return 'bg-gray-500 bg-opacity-20 text-gray-400';\n    }\n  };\n\n  const totalControls = nistControlFamilies.reduce((sum, family) => sum + family.controls, 0);\n  const totalImplemented = nistControlFamilies.reduce((sum, family) => sum + family.implemented, 0);\n  const overallCompliance = Math.round(nistControlFamilies.reduce((sum, family) => sum + family.compliance, 0) / nistControlFamilies.length);\n  const passedFamilies = nistControlFamilies.filter(f => f.status === 'pass').length;\n  const failedFamilies = nistControlFamilies.filter(f => f.status === 'fail').length;\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium flex items-center\" data-testid=\"nist-title\">\n                  <Bookmark className=\"w-8 h-8 text-wazuh-primary mr-3\" />\n                  NIST 800-53 Compliance\n                </h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"nist-subtitle\">\n                  Security and Privacy Controls for Information Systems\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-export-nist-report\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Compliance Summary */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-compliance\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Overall Compliance</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{overallCompliance}%</p>\n                      <div className=\"mt-2\">\n                        <Progress value={overallCompliance} className=\"h-2\" />\n                      </div>\n                    </div>\n                    <div className=\"bg-green-400 bg-opacity-20 p-3 rounded-lg\">\n                      <Bookmark className=\"text-green-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-controls\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Controls Implemented</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{totalImplemented}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Out of {totalControls}</p>\n                    </div>\n                    <Shield className=\"text-blue-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-families-passed\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Compliant Families</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-green-400\">{passedFamilies}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Control families</p>\n                    </div>\n                    <CheckCircle className=\"text-green-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-families-failed\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Non-Compliant</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-red-400\">{failedFamilies}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Families need attention</p>\n                    </div>\n                    <XCircle className=\"text-red-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Tabs defaultValue=\"families\" className=\"space-y-6\">\n              <TabsList className=\"wazuh-surface-variant\">\n                <TabsTrigger value=\"families\" data-testid=\"tab-families\">Control Families</TabsTrigger>\n                <TabsTrigger value=\"priority\" data-testid=\"tab-priority\">High Priority Controls</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"families\" className=\"space-y-6\">\n                {/* Control Families Table */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"families-table\">\n                  <CardHeader>\n                    <CardTitle>NIST 800-53 Control Families</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"wazuh-surface-variant\">\n                          <tr>\n                            <th className=\"text-left p-4 font-medium text-sm\">Family</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Name</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Implementation</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Compliance</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {nistControlFamilies.map((family) => (\n                            <tr \n                              key={family.id} \n                              className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                              data-testid={`family-row-${family.id}`}\n                            >\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  {getStatusIcon(family.status)}\n                                  <span className=\"font-mono font-medium\" data-testid={`family-id-${family.id}`}>\n                                    {family.id}\n                                  </span>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"text-sm font-medium\" data-testid={`family-name-${family.id}`}>\n                                  {family.name}\n                                </div>\n                              </td>\n                              <td className=\"p-4 text-sm\" data-testid={`family-implementation-${family.id}`}>\n                                {family.implemented}/{family.controls} controls\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"text-sm\" data-testid={`family-compliance-${family.id}`}>\n                                    {family.compliance}%\n                                  </span>\n                                  <div className=\"w-16\">\n                                    <Progress value={family.compliance} className=\"h-2\" />\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge className={`text-xs ${getStatusColor(family.status)}`}>\n                                  {family.status === 'pass' ? 'COMPLIANT' : 'NON-COMPLIANT'}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                  data-testid={`button-view-${family.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4 mr-1\" />\n                                  Details\n                                </Button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"priority\" className=\"space-y-6\">\n                {/* High Priority Controls */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"priority-controls-table\">\n                  <CardHeader>\n                    <CardTitle>High Priority Security Controls</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"wazuh-surface-variant\">\n                          <tr>\n                            <th className=\"text-left p-4 font-medium text-sm\">Control</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Name</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Family</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Priority</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Implementation</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Compliance</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                            <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {highPriorityControls.map((control) => (\n                            <tr \n                              key={control.id} \n                              className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                              data-testid={`control-row-${control.id}`}\n                            >\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  {getStatusIcon(control.status)}\n                                  <span className=\"font-mono font-medium\" data-testid={`control-id-${control.id}`}>\n                                    {control.id}\n                                  </span>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"text-sm font-medium\" data-testid={`control-name-${control.id}`}>\n                                  {control.name}\n                                </div>\n                              </td>\n                              <td className=\"p-4 text-sm text-gray-400\" data-testid={`control-family-${control.id}`}>\n                                {control.family}\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge className={`text-xs ${getPriorityColor(control.priority)}`}>\n                                  {control.priority}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4 text-sm max-w-xs\" data-testid={`control-implementation-${control.id}`}>\n                                {control.implementation}\n                              </td>\n                              <td className=\"p-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"text-sm\" data-testid={`control-compliance-${control.id}`}>\n                                    {control.compliance}%\n                                  </span>\n                                  <div className=\"w-16\">\n                                    <Progress value={control.compliance} className=\"h-2\" />\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"p-4\">\n                                <Badge className={`text-xs ${getStatusColor(control.status)}`}>\n                                  {control.status === 'pass' ? 'COMPLIANT' : 'NON-COMPLIANT'}\n                                </Badge>\n                              </td>\n                              <td className=\"p-4\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                  data-testid={`button-view-control-${control.id}`}\n                                >\n                                  <Eye className=\"w-4 h-4 mr-1\" />\n                                  Details\n                                </Button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":19858},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pci-dss.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Download, CreditCard, CheckCircle, XCircle, AlertTriangle, Eye } from \"lucide-react\";\nimport type { ComplianceResult } from \"@shared/schema\";\n\nexport default function PciDss() {\n  const { data: complianceResults, isLoading } = useQuery<ComplianceResult[]>({\n    queryKey: [\"/api/compliance\"],\n    refetchInterval: 30000,\n  });\n\n  // PCI DSS Requirements\n  const pciRequirements = [\n    { \n      id: \"1\", \n      title: \"Install and maintain a firewall configuration\",\n      status: \"pass\",\n      details: \"Firewall rules properly configured and maintained\",\n      tests: 12,\n      passed: 11,\n      agents: 25\n    },\n    { \n      id: \"2\", \n      title: \"Do not use vendor-supplied defaults for system passwords\",\n      status: \"pass\",\n      details: \"Default passwords have been changed on all systems\",\n      tests: 8,\n      passed: 8,\n      agents: 25\n    },\n    { \n      id: \"3\", \n      title: \"Protect stored cardholder data\",\n      status: \"fail\",\n      details: \"Some systems lack proper encryption for cardholder data\",\n      tests: 15,\n      passed: 12,\n      agents: 18\n    },\n    { \n      id: \"4\", \n      title: \"Encrypt transmission of cardholder data\",\n      status: \"pass\",\n      details: \"All transmissions properly encrypted with TLS 1.2+\",\n      tests: 6,\n      passed: 6,\n      agents: 15\n    },\n    { \n      id: \"5\", \n      title: \"Protect all systems against malware\",\n      status: \"pass\",\n      details: \"Anti-malware solutions deployed and updated\",\n      tests: 10,\n      passed: 9,\n      agents: 25\n    },\n    { \n      id: \"6\", \n      title: \"Develop and maintain secure systems and applications\",\n      status: \"fail\",\n      details: \"Some applications missing security patches\",\n      tests: 20,\n      passed: 16,\n      agents: 22\n    },\n    { \n      id: \"7\", \n      title: \"Restrict access to cardholder data by business need to know\",\n      status: \"pass\",\n      details: \"Access controls properly implemented\",\n      tests: 14,\n      passed: 13,\n      agents: 20\n    },\n    { \n      id: \"8\", \n      title: \"Identify and authenticate access to system components\",\n      status: \"pass\",\n      details: \"Multi-factor authentication in place\",\n      tests: 18,\n      passed: 17,\n      agents: 25\n    },\n    { \n      id: \"9\", \n      title: \"Restrict physical access to cardholder data\",\n      status: \"not_applicable\",\n      details: \"Cloud-based infrastructure, physical access controlled by provider\",\n      tests: 0,\n      passed: 0,\n      agents: 0\n    },\n    { \n      id: \"10\", \n      title: \"Track and monitor all access to network resources\",\n      status: \"pass\",\n      details: \"Comprehensive logging and monitoring in place\",\n      tests: 16,\n      passed: 15,\n      agents: 25\n    },\n    { \n      id: \"11\", \n      title: \"Regularly test security systems and processes\",\n      status: \"pass\",\n      details: \"Regular vulnerability scans and penetration testing\",\n      tests: 8,\n      passed: 7,\n      agents: 25\n    },\n    { \n      id: \"12\", \n      title: \"Maintain a policy that addresses information security\",\n      status: \"pass\",\n      details: \"Security policies documented and enforced\",\n      tests: 5,\n      passed: 5,\n      agents: 25\n    }\n  ];\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pass':\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case 'fail':\n        return <XCircle className=\"w-5 h-5 text-red-400\" />;\n      case 'not_applicable':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />;\n      default:\n        return <AlertTriangle className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pass':\n        return 'bg-green-400 bg-opacity-20 text-green-400';\n      case 'fail':\n        return 'bg-red-400 bg-opacity-20 text-red-400';\n      case 'not_applicable':\n        return 'bg-yellow-400 bg-opacity-20 text-yellow-400';\n      default:\n        return 'bg-gray-400 bg-opacity-20 text-gray-400';\n    }\n  };\n\n  const passedRequirements = pciRequirements.filter(r => r.status === 'pass').length;\n  const failedRequirements = pciRequirements.filter(r => r.status === 'fail').length;\n  const notApplicableRequirements = pciRequirements.filter(r => r.status === 'not_applicable').length;\n  const totalRequirements = pciRequirements.length - notApplicableRequirements;\n  const complianceScore = Math.round((passedRequirements / totalRequirements) * 100);\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium flex items-center\" data-testid=\"pci-title\">\n                  <CreditCard className=\"w-8 h-8 text-wazuh-primary mr-3\" />\n                  PCI DSS Compliance\n                </h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"pci-subtitle\">\n                  Payment Card Industry Data Security Standard\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-export-pci-report\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Compliance Summary */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-score\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Compliance Score</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{complianceScore}%</p>\n                      <div className=\"mt-2\">\n                        <Progress value={complianceScore} className=\"h-2\" />\n                      </div>\n                    </div>\n                    <div className=\"bg-green-400 bg-opacity-20 p-3 rounded-lg\">\n                      <CreditCard className=\"text-green-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-passed\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Passed</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-green-400\">{passedRequirements}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Requirements</p>\n                    </div>\n                    <CheckCircle className=\"text-green-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-failed\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Failed</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-red-400\">{failedRequirements}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Requirements</p>\n                    </div>\n                    <XCircle className=\"text-red-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-not-applicable\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Not Applicable</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-yellow-400\">{notApplicableRequirements}</p>\n                      <p className=\"text-gray-400 text-xs mt-1\">Requirements</p>\n                    </div>\n                    <AlertTriangle className=\"text-yellow-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Tabs defaultValue=\"requirements\" className=\"space-y-6\">\n              <TabsList className=\"wazuh-surface-variant\">\n                <TabsTrigger value=\"requirements\" data-testid=\"tab-requirements\">Requirements</TabsTrigger>\n                <TabsTrigger value=\"evidence\" data-testid=\"tab-evidence\">Evidence</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"requirements\" className=\"space-y-6\">\n                {/* Requirements Table */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"requirements-table\">\n                  <CardHeader>\n                    <CardTitle>PCI DSS Requirements Assessment</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    {isLoading ? (\n                      <div className=\"p-8 text-center text-gray-400\">\n                        Loading compliance data...\n                      </div>\n                    ) : (\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full\">\n                          <thead className=\"wazuh-surface-variant\">\n                            <tr>\n                              <th className=\"text-left p-4 font-medium text-sm\">Requirement</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Title</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Test Results</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Agents</th>\n                              <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {pciRequirements.map((requirement) => (\n                              <tr \n                                key={requirement.id} \n                                className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                                data-testid={`requirement-row-${requirement.id}`}\n                              >\n                                <td className=\"p-4\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    {getStatusIcon(requirement.status)}\n                                    <span className=\"font-medium\" data-testid={`requirement-id-${requirement.id}`}>\n                                      {requirement.id}\n                                    </span>\n                                  </div>\n                                </td>\n                                <td className=\"p-4\">\n                                  <div className=\"max-w-md\">\n                                    <div className=\"text-sm font-medium\" data-testid={`requirement-title-${requirement.id}`}>\n                                      {requirement.title}\n                                    </div>\n                                    <div className=\"text-xs text-gray-400 mt-1\" data-testid={`requirement-details-${requirement.id}`}>\n                                      {requirement.details}\n                                    </div>\n                                  </div>\n                                </td>\n                                <td className=\"p-4\">\n                                  <Badge className={`text-xs ${getStatusColor(requirement.status)}`}>\n                                    {requirement.status.replace('_', ' ').toUpperCase()}\n                                  </Badge>\n                                </td>\n                                <td className=\"p-4 text-sm\">\n                                  {requirement.status !== 'not_applicable' && (\n                                    <span data-testid={`requirement-tests-${requirement.id}`}>\n                                      {requirement.passed}/{requirement.tests} passed\n                                    </span>\n                                  )}\n                                </td>\n                                <td className=\"p-4 text-sm\" data-testid={`requirement-agents-${requirement.id}`}>\n                                  {requirement.agents > 0 ? `${requirement.agents} agents` : 'N/A'}\n                                </td>\n                                <td className=\"p-4\">\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                    data-testid={`button-view-${requirement.id}`}\n                                  >\n                                    <Eye className=\"w-4 h-4 mr-1\" />\n                                    Details\n                                  </Button>\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"evidence\" className=\"space-y-6\">\n                {/* Evidence Collection */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"evidence-table\">\n                  <CardHeader>\n                    <CardTitle>Compliance Evidence</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"wazuh-surface-variant rounded p-4\">\n                        <h4 className=\"font-medium mb-2\">Log Collection Evidence</h4>\n                        <p className=\"text-sm text-gray-400 mb-2\">\n                          Logs collected from all in-scope systems demonstrating compliance with PCI DSS requirements.\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge className=\"text-xs bg-green-400 bg-opacity-20 text-green-400\">\n                            ✓ Complete\n                          </Badge>\n                          <span className=\"text-xs text-gray-400\">Last updated: 2 hours ago</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"wazuh-surface-variant rounded p-4\">\n                        <h4 className=\"font-medium mb-2\">Network Security Scans</h4>\n                        <p className=\"text-sm text-gray-400 mb-2\">\n                          Quarterly vulnerability scans and penetration testing results.\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge className=\"text-xs bg-green-400 bg-opacity-20 text-green-400\">\n                            ✓ Complete\n                          </Badge>\n                          <span className=\"text-xs text-gray-400\">Last scan: 1 week ago</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"wazuh-surface-variant rounded p-4\">\n                        <h4 className=\"font-medium mb-2\">Access Control Documentation</h4>\n                        <p className=\"text-sm text-gray-400 mb-2\">\n                          Documentation of access controls and user management processes.\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge className=\"text-xs bg-yellow-400 bg-opacity-20 text-yellow-400\">\n                            ⚠ Pending Review\n                          </Badge>\n                          <span className=\"text-xs text-gray-400\">Due: 3 days</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":17349},"client/src/pages/ruleset-test.tsx":{"content":"import { useState } from \"react\";\nimport { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { FlaskConical, Play, Copy, Upload, FileText, CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\n\nexport default function RulesetTest() {\n  const [logInput, setLogInput] = useState(\"\");\n  const [selectedLogType, setSelectedLogType] = useState(\"syslog\");\n  const [testResults, setTestResults] = useState<any>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Example log formats\n  const exampleLogs = {\n    syslog: \"Jan 20 10:30:15 server01 sshd[1234]: Failed password for invalid user admin from 192.168.1.100 port 22 ssh2\",\n    apache: '192.168.1.100 - - [20/Jan/2024:10:30:15 +0000] \"GET /admin HTTP/1.1\" 404 162 \"-\" \"Mozilla/5.0\"',\n    windows: \"Jan 20 10:30:15 WinEvtLog: Security: AUDIT_FAILURE(4625): Microsoft-Windows-Security-Auditing: SYSTEM: NT AUTHORITY: WIN-SERVER01: An account failed to log on.\",\n    firewall: \"Jan 20 10:30:15 firewall01 kernel: DROP TCP 192.168.1.100:1234 -> 10.0.0.1:80\",\n    custom: \"2024-01-20 10:30:15 [ERROR] Application authentication failed for user: admin from IP: 192.168.1.100\"\n  };\n\n  // Mock test result\n  const mockTestResult = {\n    parsed: true,\n    decoder: \"sshd\",\n    rule_id: 5710,\n    rule_description: \"sshd: Attempt to login using a non-existent user\",\n    rule_level: 5,\n    classification: \"authentication_failed\",\n    mitre_attack: [\"T1110.001\"],\n    fields: {\n      timestamp: \"Jan 20 10:30:15\",\n      hostname: \"server01\",\n      program_name: \"sshd\",\n      srcip: \"192.168.1.100\",\n      srcport: \"22\",\n      user: \"admin\",\n      action: \"failed_login\"\n    },\n    alert: true,\n    severity: \"medium\"\n  };\n\n  const handleTestLog = async () => {\n    if (!logInput.trim()) return;\n    \n    setIsProcessing(true);\n    \n    try {\n      // Mock processing delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Mock test result based on input\n      if (logInput.includes(\"Failed password\") || logInput.includes(\"authentication failed\")) {\n        setTestResults({\n          ...mockTestResult,\n          raw_log: logInput,\n          processing_time: \"12ms\"\n        });\n      } else {\n        setTestResults({\n          parsed: false,\n          decoder: \"unknown\",\n          rule_id: null,\n          rule_description: \"No rule matched\",\n          rule_level: 0,\n          classification: \"unclassified\",\n          fields: {},\n          alert: false,\n          severity: \"info\",\n          raw_log: logInput,\n          processing_time: \"8ms\"\n        });\n      }\n    } catch (error) {\n      setTestResults({\n        error: \"Failed to process log entry\",\n        raw_log: logInput\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleLoadExample = (logType: string) => {\n    setLogInput(exampleLogs[logType as keyof typeof exampleLogs]);\n    setSelectedLogType(logType);\n  };\n\n  const handleCopyResult = () => {\n    if (testResults) {\n      navigator.clipboard.writeText(JSON.stringify(testResults, null, 2));\n    }\n  };\n\n  const getResultIcon = () => {\n    if (!testResults) return null;\n    if (testResults.error) return <XCircle className=\"w-5 h-5 text-red-400\" />;\n    if (testResults.alert) return <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />;\n    if (testResults.parsed) return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n    return <XCircle className=\"w-5 h-5 text-gray-400\" />;\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'severity-critical';\n      case 'high':\n        return 'severity-high';\n      case 'medium':\n        return 'severity-medium';\n      case 'low':\n        return 'severity-low';\n      default:\n        return 'bg-gray-500 bg-opacity-20 text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium flex items-center\" data-testid=\"ruleset-test-title\">\n                  <FlaskConical className=\"w-8 h-8 text-wazuh-primary mr-3\" />\n                  Ruleset Test\n                </h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"ruleset-test-subtitle\">\n                  Test log entries against Wazuh rules and decoders\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button \n                  variant=\"outline\" \n                  className=\"border-gray-600 hover:bg-gray-700\"\n                  data-testid=\"button-upload-log-file\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload Log File\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Input Section */}\n              <div className=\"space-y-6\">\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"log-input\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <FileText className=\"w-5 h-5 mr-2\" />\n                      Log Entry Input\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Log Type</label>\n                      <Select value={selectedLogType} onValueChange={setSelectedLogType}>\n                        <SelectTrigger className=\"wazuh-surface-variant border-gray-600\" data-testid=\"select-log-type\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"syslog\">Syslog</SelectItem>\n                          <SelectItem value=\"apache\">Apache</SelectItem>\n                          <SelectItem value=\"windows\">Windows Event</SelectItem>\n                          <SelectItem value=\"firewall\">Firewall</SelectItem>\n                          <SelectItem value=\"custom\">Custom Application</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Raw Log Entry</label>\n                      <Textarea\n                        value={logInput}\n                        onChange={(e) => setLogInput(e.target.value)}\n                        placeholder=\"Paste your log entry here...\"\n                        className=\"wazuh-surface-variant border-gray-600 font-mono text-xs\"\n                        rows={6}\n                        data-testid=\"textarea-log-input\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Button \n                        onClick={handleTestLog}\n                        disabled={!logInput.trim() || isProcessing}\n                        className=\"wazuh-primary hover:bg-blue-600\"\n                        data-testid=\"button-test-log\"\n                      >\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {isProcessing ? 'Processing...' : 'Test Log'}\n                      </Button>\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => handleLoadExample(selectedLogType)}\n                        className=\"border-gray-600 hover:bg-gray-700\"\n                        data-testid=\"button-load-example\"\n                      >\n                        Load Example\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Example Logs */}\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"example-logs\">\n                  <CardHeader>\n                    <CardTitle>Example Log Formats</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {Object.entries(exampleLogs).map(([type, example]) => (\n                        <div key={type} className=\"wazuh-surface-variant rounded p-3\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"text-sm font-medium capitalize\">{type}</h4>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleLoadExample(type)}\n                              className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white text-xs\"\n                              data-testid={`button-load-${type}`}\n                            >\n                              Load\n                            </Button>\n                          </div>\n                          <code className=\"text-xs bg-black bg-opacity-50 p-2 rounded block overflow-x-auto\">\n                            {example}\n                          </code>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Results Section */}\n              <div className=\"space-y-6\">\n                <Card className=\"wazuh-surface border-gray-700\" data-testid=\"test-results\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center\">\n                        {getResultIcon()}\n                        <span className=\"ml-2\">Test Results</span>\n                      </CardTitle>\n                      {testResults && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={handleCopyResult}\n                          className=\"text-gray-400 hover:text-white\"\n                          data-testid=\"button-copy-results\"\n                        >\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {testResults ? (\n                      <div className=\"space-y-4\">\n                        {testResults.error ? (\n                          <div className=\"text-red-400 text-sm\">\n                            <strong>Error:</strong> {testResults.error}\n                          </div>\n                        ) : (\n                          <>\n                            {/* Processing Summary */}\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <span className=\"text-sm text-gray-400\">Parsed:</span>\n                                <span className={`ml-2 text-sm ${testResults.parsed ? 'text-green-400' : 'text-red-400'}`}>\n                                  {testResults.parsed ? 'Yes' : 'No'}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"text-sm text-gray-400\">Alert Generated:</span>\n                                <span className={`ml-2 text-sm ${testResults.alert ? 'text-yellow-400' : 'text-gray-400'}`}>\n                                  {testResults.alert ? 'Yes' : 'No'}\n                                </span>\n                              </div>\n                            </div>\n\n                            {/* Rule Information */}\n                            {testResults.rule_id && (\n                              <div className=\"wazuh-surface-variant rounded p-3\">\n                                <h4 className=\"font-medium mb-2\">Matched Rule</h4>\n                                <div className=\"space-y-2\">\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      Rule {testResults.rule_id}\n                                    </Badge>\n                                    <Badge className={`text-xs ${getSeverityColor(testResults.severity)}`}>\n                                      Level {testResults.rule_level}\n                                    </Badge>\n                                  </div>\n                                  <p className=\"text-sm\" data-testid=\"rule-description\">\n                                    {testResults.rule_description}\n                                  </p>\n                                  {testResults.mitre_attack && testResults.mitre_attack.length > 0 && (\n                                    <div className=\"flex items-center space-x-2\">\n                                      <span className=\"text-xs text-gray-400\">MITRE ATT&CK:</span>\n                                      {testResults.mitre_attack.map((technique: string) => (\n                                        <Badge key={technique} variant=\"outline\" className=\"text-xs\">\n                                          {technique}\n                                        </Badge>\n                                      ))}\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Extracted Fields */}\n                            {testResults.fields && Object.keys(testResults.fields).length > 0 && (\n                              <div className=\"wazuh-surface-variant rounded p-3\">\n                                <h4 className=\"font-medium mb-2\">Extracted Fields</h4>\n                                <div className=\"space-y-1\">\n                                  {Object.entries(testResults.fields).map(([key, value]) => (\n                                    <div key={key} className=\"flex items-center text-sm\">\n                                      <span className=\"text-gray-400 w-24\">{key}:</span>\n                                      <span className=\"font-mono text-xs\" data-testid={`field-${key}`}>\n                                        {String(value)}\n                                      </span>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Raw JSON Output */}\n                            <div className=\"bg-black bg-opacity-50 p-3 rounded border\">\n                              <h4 className=\"font-medium mb-2 text-sm\">Raw Output</h4>\n                              <pre className=\"text-xs font-mono whitespace-pre-wrap overflow-x-auto\" data-testid=\"raw-output\">\n                                {JSON.stringify(testResults, null, 2)}\n                              </pre>\n                            </div>\n                          </>\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"text-center text-gray-400 py-8\">\n                        <FlaskConical className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                        <p>Test a log entry to see the results</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* Rule Testing Guide */}\n            <Card className=\"wazuh-surface border-gray-700 mt-6\" data-testid=\"testing-guide\">\n              <CardHeader>\n                <CardTitle>Rule Testing Guide</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"wazuh-surface-variant rounded p-4\">\n                    <h4 className=\"font-medium mb-2\">1. Input Log Data</h4>\n                    <p className=\"text-sm text-gray-400\">\n                      Paste raw log entries from your applications, systems, or security devices.\n                    </p>\n                  </div>\n                  <div className=\"wazuh-surface-variant rounded p-4\">\n                    <h4 className=\"font-medium mb-2\">2. Analyze Processing</h4>\n                    <p className=\"text-sm text-gray-400\">\n                      Review how Wazuh parses the log and which rules are triggered.\n                    </p>\n                  </div>\n                  <div className=\"wazuh-surface-variant rounded p-4\">\n                    <h4 className=\"font-medium mb-2\">3. Validate Rules</h4>\n                    <p className=\"text-sm text-gray-400\">\n                      Ensure your custom rules work as expected and generate appropriate alerts.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":17914},"client/src/pages/vulnerabilities.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/dashboard/top-nav\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, Download, Bug, Eye, ExternalLink } from \"lucide-react\";\nimport type { Vulnerability } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Vulnerabilities() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [severityFilter, setSeverityFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  \n  const { data: vulnerabilities, isLoading } = useQuery<Vulnerability[]>({\n    queryKey: [\"/api/vulnerabilities\"],\n    refetchInterval: 30000,\n  });\n\n  const getSeverityClass = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'severity-critical';\n      case 'high':\n        return 'severity-high';\n      case 'medium':\n        return 'severity-medium';\n      case 'low':\n        return 'severity-low';\n      default:\n        return 'severity-low';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open':\n        return 'bg-red-500 bg-opacity-20 text-red-400';\n      case 'fixed':\n        return 'bg-green-400 bg-opacity-20 text-green-400';\n      case 'ignored':\n        return 'bg-gray-500 bg-opacity-20 text-gray-400';\n      default:\n        return 'bg-gray-500 bg-opacity-20 text-gray-400';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string | Date) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffMs = now.getTime() - time.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) return 'Today';\n    if (diffDays === 1) return 'Yesterday';\n    return `${diffDays} days ago`;\n  };\n\n  const filteredVulnerabilities = vulnerabilities?.filter(vuln => {\n    if (severityFilter !== \"all\" && vuln.severity !== severityFilter) return false;\n    if (statusFilter !== \"all\" && vuln.status !== statusFilter) return false;\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase();\n      return vuln.cve.toLowerCase().includes(search) ||\n             vuln.title.toLowerCase().includes(search) ||\n             vuln.agentName.toLowerCase().includes(search) ||\n             (vuln.package && vuln.package.toLowerCase().includes(search));\n    }\n    return true;\n  }) || [];\n\n  const criticalCount = filteredVulnerabilities.filter(v => v.severity === 'critical').length;\n  const highCount = filteredVulnerabilities.filter(v => v.severity === 'high').length;\n  const openCount = filteredVulnerabilities.filter(v => v.status === 'open').length;\n\n  return (\n    <div className=\"min-h-screen bg-wazuh-dark text-white font-roboto\">\n      <TopNav />\n      \n      <div className=\"flex h-screen pt-16\">\n        <Sidebar />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"wazuh-surface border-b border-gray-700 p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-medium\" data-testid=\"vulnerabilities-title\">Vulnerabilities</h2>\n                <p className=\"text-gray-400 mt-1\" data-testid=\"vulnerabilities-subtitle\">\n                  Track and remediate security vulnerabilities\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button className=\"wazuh-primary hover:bg-blue-600\" data-testid=\"button-export-vulnerabilities\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Summary Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-total\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Total Vulnerabilities</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{filteredVulnerabilities.length}</p>\n                    </div>\n                    <Bug className=\"text-gray-400 w-8 h-8\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-critical\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Critical</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-red-400\">{criticalCount}</p>\n                    </div>\n                    <div className=\"bg-red-500 bg-opacity-20 p-2 rounded-lg\">\n                      <Bug className=\"text-red-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-high\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">High</p>\n                      <p className=\"text-3xl font-semibold mt-2 text-yellow-400\">{highCount}</p>\n                    </div>\n                    <div className=\"bg-yellow-500 bg-opacity-20 p-2 rounded-lg\">\n                      <Bug className=\"text-yellow-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"wazuh-surface border-gray-700\" data-testid=\"summary-open\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Open</p>\n                      <p className=\"text-3xl font-semibold mt-2\">{openCount}</p>\n                    </div>\n                    <div className=\"bg-blue-500 bg-opacity-20 p-2 rounded-lg\">\n                      <Bug className=\"text-blue-400 w-6 h-6\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filters */}\n            <Card className=\"wazuh-surface border-gray-700 mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Filter className=\"w-5 h-5 mr-2\" />\n                  Filters\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap items-center gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Search className=\"w-4 h-4 text-gray-400\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search CVE, title, agent, or package...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"wazuh-surface-variant border-gray-600 w-80\"\n                      data-testid=\"input-search-vulnerabilities\"\n                    />\n                  </div>\n                  \n                  <Select value={severityFilter} onValueChange={setSeverityFilter}>\n                    <SelectTrigger className=\"w-40 wazuh-surface-variant border-gray-600\" data-testid=\"select-severity\">\n                      <SelectValue placeholder=\"Severity\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Severities</SelectItem>\n                      <SelectItem value=\"critical\">Critical</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-40 wazuh-surface-variant border-gray-600\" data-testid=\"select-status\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"open\">Open</SelectItem>\n                      <SelectItem value=\"fixed\">Fixed</SelectItem>\n                      <SelectItem value=\"ignored\">Ignored</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Vulnerabilities Table */}\n            <Card className=\"wazuh-surface border-gray-700\" data-testid=\"vulnerabilities-table\">\n              <CardHeader>\n                <CardTitle>Vulnerabilities ({filteredVulnerabilities.length})</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {isLoading ? (\n                  <div className=\"p-8 text-center text-gray-400\">\n                    Loading vulnerabilities...\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"wazuh-surface-variant\">\n                        <tr>\n                          <th className=\"text-left p-4 font-medium text-sm\">CVE</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Severity</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Title</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Agent</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Package</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Detected</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Status</th>\n                          <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {filteredVulnerabilities.map((vuln) => (\n                          <tr \n                            key={vuln.id} \n                            className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                            data-testid={`vulnerability-row-${vuln.id}`}\n                          >\n                            <td className=\"p-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"font-mono text-sm text-blue-400\" data-testid={`vuln-cve-${vuln.id}`}>\n                                  {vuln.cve}\n                                </span>\n                                <ExternalLink className=\"w-3 h-3 text-gray-400\" />\n                              </div>\n                            </td>\n                            <td className=\"p-4\">\n                              <Badge className={cn(\"text-xs\", getSeverityClass(vuln.severity))}>\n                                {vuln.severity}\n                              </Badge>\n                            </td>\n                            <td className=\"p-4 text-sm max-w-xs truncate\" data-testid={`vuln-title-${vuln.id}`}>\n                              {vuln.title}\n                            </td>\n                            <td className=\"p-4 text-sm\" data-testid={`vuln-agent-${vuln.id}`}>\n                              {vuln.agentName}\n                            </td>\n                            <td className=\"p-4 text-sm font-mono text-gray-300\" data-testid={`vuln-package-${vuln.id}`}>\n                              {vuln.package || 'N/A'}\n                            </td>\n                            <td className=\"p-4 text-sm text-gray-400\" data-testid={`vuln-detected-${vuln.id}`}>\n                              {formatTimeAgo(vuln.detectedAt!)}\n                            </td>\n                            <td className=\"p-4\">\n                              <Badge className={cn(\"text-xs\", getStatusColor(vuln.status || 'open'))}>\n                                {vuln.status || 'open'}\n                              </Badge>\n                            </td>\n                            <td className=\"p-4\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                className=\"text-wazuh-primary hover:bg-wazuh-primary hover:text-white\"\n                                data-testid={`button-view-${vuln.id}`}\n                              >\n                                <Eye className=\"w-4 h-4 mr-1\" />\n                                Details\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":13825},"client/src/components/dashboard/agent-status.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { AgentStatusCounts, Agent } from \"@shared/schema\";\n\nexport function AgentStatus() {\n  const { data: statusCounts, isLoading: statusLoading } = useQuery<AgentStatusCounts>({\n    queryKey: [\"/api/agents/status\"],\n    refetchInterval: 30000,\n  });\n\n  const { data: recentActivity, isLoading: activityLoading } = useQuery<Agent[]>({\n    queryKey: [\"/api/agents/recent\"],\n    refetchInterval: 30000,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-400';\n      case 'disconnected':\n        return 'bg-gray-500';\n      case 'pending':\n        return 'bg-yellow-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'Connected';\n      case 'disconnected':\n        return 'Disconnected';\n      case 'pending':\n        return 'Reconnected';\n      default:\n        return status;\n    }\n  };\n\n  if (statusLoading || activityLoading) {\n    return (\n      <Card className=\"wazuh-surface border-gray-700\">\n        <CardHeader>\n          <CardTitle>Agent Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-4 bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"wazuh-surface border-gray-700\" data-testid=\"agent-status\">\n      <CardHeader className=\"border-b border-gray-700\">\n        <CardTitle data-testid=\"agent-status-title\">Agent Status</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n              <span className=\"text-sm\">Active</span>\n            </div>\n            <span className=\"text-sm font-medium\" data-testid=\"agent-status-active\">\n              {statusCounts?.active || 0}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-3 h-3 bg-gray-500 rounded-full\"></div>\n              <span className=\"text-sm\">Disconnected</span>\n            </div>\n            <span className=\"text-sm font-medium\" data-testid=\"agent-status-disconnected\">\n              {statusCounts?.disconnected || 0}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n              <span className=\"text-sm\">Pending</span>\n            </div>\n            <span className=\"text-sm font-medium\" data-testid=\"agent-status-pending\">\n              {statusCounts?.pending || 0}\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"mt-6\">\n          <h4 className=\"text-sm font-medium mb-4\">Recent Agent Activity</h4>\n          <div className=\"space-y-3\">\n            {recentActivity?.slice(0, 3).map((agent) => (\n              <div key={agent.id} className=\"flex items-center justify-between text-sm\" data-testid={`agent-activity-${agent.id}`}>\n                <span className=\"text-gray-400\" data-testid={`agent-name-${agent.id}`}>{agent.name}</span>\n                <span className={`text-sm ${\n                  agent.status === 'active' ? 'text-green-400' : \n                  agent.status === 'pending' ? 'text-yellow-500' : 'text-gray-400'\n                }`} data-testid={`agent-status-label-${agent.id}`}>\n                  {getStatusLabel(agent.status)}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        <Button \n          className=\"w-full mt-6 wazuh-primary hover:bg-blue-600\"\n          data-testid=\"button-manage-agents\"\n        >\n          Manage Agents\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4355},"client/src/components/dashboard/alerts-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\ninterface AlertData {\n  time: string;\n  critical: number;\n  high: number;\n  medium: number;\n  low: number;\n}\n\nexport function AlertsChart() {\n  const { data: alertData, isLoading } = useQuery<AlertData[]>({\n    queryKey: [\"/api/alerts/timeline\"],\n    refetchInterval: 30000,\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"wazuh-surface border-gray-700\">\n        <CardHeader>\n          <CardTitle>Security Alerts Timeline</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 flex items-center justify-center\">\n            <div className=\"animate-pulse text-gray-400\">Loading chart data...</div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"wazuh-surface border-gray-700\" data-testid=\"alerts-chart\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle data-testid=\"alerts-chart-title\">Security Alerts Timeline</CardTitle>\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"w-3 h-3 bg-red-500 rounded-full\"></span>\n              <span className=\"text-gray-400\">Critical</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"w-3 h-3 bg-yellow-500 rounded-full\"></span>\n              <span className=\"text-gray-400\">High</span>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={alertData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis \n                dataKey=\"time\" \n                stroke=\"#9CA3AF\"\n                fontSize={12}\n              />\n              <YAxis \n                stroke=\"#9CA3AF\"\n                fontSize={12}\n              />\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: '#1F2937', \n                  border: '1px solid #374151',\n                  borderRadius: '8px'\n                }}\n                labelStyle={{ color: '#E5E7EB' }}\n              />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"critical\" \n                stroke=\"#EF4444\" \n                strokeWidth={2}\n                name=\"Critical\"\n                dot={{ fill: '#EF4444', strokeWidth: 2, r: 4 }}\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"high\" \n                stroke=\"#F59E0B\" \n                strokeWidth={2}\n                name=\"High\"\n                dot={{ fill: '#F59E0B', strokeWidth: 2, r: 4 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3151},"client/src/components/dashboard/compliance-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CreditCard, UserCheck, Hospital, Bookmark } from \"lucide-react\";\nimport type { ComplianceFrameworkScore } from \"@shared/schema\";\n\nexport function ComplianceOverview() {\n  const { data: complianceData, isLoading } = useQuery<ComplianceFrameworkScore[]>({\n    queryKey: [\"/api/compliance/overview\"],\n    refetchInterval: 30000,\n  });\n\n  const getFrameworkIcon = (framework: string) => {\n    switch (framework) {\n      case 'PCI_DSS':\n        return CreditCard;\n      case 'GDPR':\n        return UserCheck;\n      case 'HIPAA':\n        return Hospital;\n      case 'NIST_800_53':\n        return Bookmark;\n      default:\n        return CreditCard;\n    }\n  };\n\n  const getFrameworkName = (framework: string) => {\n    switch (framework) {\n      case 'PCI_DSS':\n        return 'PCI DSS';\n      case 'GDPR':\n        return 'GDPR';\n      case 'HIPAA':\n        return 'HIPAA';\n      case 'NIST_800_53':\n        return 'NIST 800-53';\n      default:\n        return framework;\n    }\n  };\n\n  const getScoreColor = (percentage: number) => {\n    if (percentage >= 95) return 'text-green-400';\n    if (percentage >= 85) return 'text-yellow-500';\n    return 'text-red-400';\n  };\n\n  const getProgressColor = (percentage: number) => {\n    if (percentage >= 95) return 'bg-green-400';\n    if (percentage >= 85) return 'bg-yellow-500';\n    return 'bg-red-400';\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"wazuh-surface border-gray-700\">\n        <CardHeader>\n          <CardTitle>Compliance Overview</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between p-4 wazuh-surface-variant rounded animate-pulse\">\n                <div className=\"h-4 bg-gray-700 rounded w-24\"></div>\n                <div className=\"h-4 bg-gray-700 rounded w-16\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"wazuh-surface border-gray-700\" data-testid=\"compliance-overview\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle data-testid=\"compliance-overview-title\">Compliance Overview</CardTitle>\n          <Button \n            variant=\"link\" \n            className=\"text-wazuh-primary hover:underline text-sm p-0\"\n            data-testid=\"button-view-reports\"\n          >\n            View Reports\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {complianceData?.map((framework) => {\n            const IconComponent = getFrameworkIcon(framework.framework);\n            return (\n              <div \n                key={framework.framework} \n                className=\"flex items-center justify-between p-4 wazuh-surface-variant rounded\"\n                data-testid={`compliance-framework-${framework.framework}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <IconComponent className=\"text-wazuh-primary w-5 h-5\" />\n                  <span className=\"text-sm font-medium\" data-testid={`framework-name-${framework.framework}`}>\n                    {getFrameworkName(framework.framework)}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span \n                    className={`text-sm ${getScoreColor(framework.percentage)}`}\n                    data-testid={`framework-score-${framework.framework}`}\n                  >\n                    {framework.percentage}%\n                  </span>\n                  <div className=\"w-16\">\n                    <Progress \n                      value={framework.percentage} \n                      className=\"h-2\"\n                      data-testid={`framework-progress-${framework.framework}`}\n                    />\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4333},"client/src/components/dashboard/kpi-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Server, AlertTriangle, Bug, Shield } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { DashboardMetrics } from \"@shared/schema\";\n\nexport function KPICards() {\n  const { data: metrics, isLoading } = useQuery<DashboardMetrics>({\n    queryKey: [\"/api/dashboard/metrics\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"wazuh-surface border-gray-700\">\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-700 rounded w-24 mb-4\"></div>\n                <div className=\"h-8 bg-gray-700 rounded w-16 mb-2\"></div>\n                <div className=\"h-3 bg-gray-700 rounded w-32\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const kpiData = [\n    {\n      title: \"Active Agents\",\n      value: metrics?.activeAgents || 0,\n      change: \"+12 from yesterday\",\n      changeType: \"positive\" as const,\n      icon: Server,\n      iconColor: \"text-wazuh-primary\",\n      bgColor: \"bg-wazuh-primary bg-opacity-20\",\n      testId: \"kpi-active-agents\"\n    },\n    {\n      title: \"Critical Alerts\",\n      value: metrics?.criticalAlerts || 0,\n      change: \"+6 in last hour\",\n      changeType: \"negative\" as const,\n      icon: AlertTriangle,\n      iconColor: \"text-red-500\",\n      bgColor: \"bg-red-500 bg-opacity-20\",\n      testId: \"kpi-critical-alerts\"\n    },\n    {\n      title: \"Vulnerabilities\",\n      value: metrics?.vulnerabilities || 0,\n      change: \"-8 since last scan\",\n      changeType: \"positive\" as const,\n      icon: Bug,\n      iconColor: \"text-yellow-500\",\n      bgColor: \"bg-yellow-500 bg-opacity-20\",\n      testId: \"kpi-vulnerabilities\"\n    },\n    {\n      title: \"Compliance Score\",\n      value: `${metrics?.complianceScore || 0}%`,\n      change: \"+2% this month\",\n      changeType: \"positive\" as const,\n      icon: Shield,\n      iconColor: \"text-green-400\",\n      bgColor: \"bg-green-400 bg-opacity-20\",\n      testId: \"kpi-compliance-score\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {kpiData.map((kpi) => (\n        <Card key={kpi.title} className=\"wazuh-surface border-gray-700\" data-testid={kpi.testId}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-400 text-sm\" data-testid={`${kpi.testId}-title`}>{kpi.title}</p>\n                <p className=\"text-3xl font-semibold mt-2\" data-testid={`${kpi.testId}-value`}>{kpi.value}</p>\n                <p className={`text-xs mt-1 ${kpi.changeType === 'positive' ? 'text-green-400' : 'text-red-500'}`} data-testid={`${kpi.testId}-change`}>\n                  {kpi.change}\n                </p>\n              </div>\n              <div className={`${kpi.bgColor} p-3 rounded-lg`}>\n                <kpi.icon className={`${kpi.iconColor} text-xl w-6 h-6`} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3324},"client/src/components/dashboard/mitre-attack.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { MitreAttackData } from \"@shared/schema\";\n\nexport function MitreAttack() {\n  const { data: mitreData, isLoading } = useQuery<MitreAttackData[]>({\n    queryKey: [\"/api/mitre-attack\"],\n    refetchInterval: 30000,\n  });\n\n  const getSeverityBadge = (alertCount: number) => {\n    if (alertCount >= 3) return { className: \"severity-critical\", label: `${alertCount} alerts` };\n    if (alertCount >= 2) return { className: \"severity-high\", label: `${alertCount} alerts` };\n    if (alertCount >= 1) return { className: \"severity-medium\", label: `${alertCount} alert` };\n    return { className: \"severity-low\", label: \"No alerts\" };\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"wazuh-surface border-gray-700\">\n        <CardHeader>\n          <CardTitle>MITRE ATT&CK Framework</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"wazuh-surface-variant rounded p-4 animate-pulse\">\n                <div className=\"h-4 bg-gray-700 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-700 rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"wazuh-surface border-gray-700\" data-testid=\"mitre-attack\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle data-testid=\"mitre-attack-title\">MITRE ATT&CK Framework</CardTitle>\n          <Button \n            variant=\"link\" \n            className=\"text-wazuh-primary hover:underline text-sm p-0\"\n            data-testid=\"button-view-matrix\"\n          >\n            View Full Matrix\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {mitreData?.slice(0, 3).map((technique) => {\n            const badge = getSeverityBadge(technique.alertCount || 0);\n            return (\n              <div \n                key={technique.id} \n                className=\"wazuh-surface-variant rounded p-4\"\n                data-testid={`mitre-technique-${technique.techniqueId}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium\" data-testid={`technique-name-${technique.techniqueId}`}>\n                    {technique.tactic}\n                  </span>\n                  <Badge className={`text-xs px-2 py-1 rounded ${badge.className}`}>\n                    {badge.label}\n                  </Badge>\n                </div>\n                <div className=\"text-xs text-gray-400\" data-testid={`technique-id-${technique.techniqueId}`}>\n                  {technique.techniqueId} - {technique.techniqueName}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3166},"client/src/components/dashboard/recent-alerts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, AlertTriangle, AlertCircle, Info } from \"lucide-react\";\nimport type { Alert } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\nexport function RecentAlerts() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  const { data: alerts, isLoading } = useQuery<Alert[]>({\n    queryKey: [\"/api/alerts\", { search: searchTerm, page: currentPage, limit: 10 }],\n    refetchInterval: 30000,\n  });\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return <AlertTriangle className=\"w-4 h-4 mr-1\" />;\n      case 'high':\n        return <AlertCircle className=\"w-4 h-4 mr-1\" />;\n      case 'medium':\n        return <Info className=\"w-4 h-4 mr-1\" />;\n      default:\n        return <Info className=\"w-4 h-4 mr-1\" />;\n    }\n  };\n\n  const getSeverityClass = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'severity-critical';\n      case 'high':\n        return 'severity-high';\n      case 'medium':\n        return 'severity-medium';\n      case 'low':\n        return 'severity-low';\n      default:\n        return 'severity-low';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string | Date) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffMs = now.getTime() - time.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    \n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins} min ago`;\n    if (diffMins < 1440) return `${Math.floor(diffMins / 60)} hours ago`;\n    return `${Math.floor(diffMins / 1440)} days ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"wazuh-surface border-gray-700\">\n        <CardHeader>\n          <CardTitle>Recent Security Alerts</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-700 rounded w-full mb-2\"></div>\n                <div className=\"h-3 bg-gray-700 rounded w-3/4\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"wazuh-surface border-gray-700\" data-testid=\"recent-alerts\">\n      <CardHeader className=\"border-b border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle data-testid=\"recent-alerts-title\">Recent Security Alerts</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search alerts...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"wazuh-surface-variant border-gray-600 w-48\"\n              data-testid=\"input-search-alerts\"\n            />\n            <Button size=\"sm\" className=\"wazuh-primary\" data-testid=\"button-search\">\n              <Search className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"wazuh-surface-variant\">\n              <tr>\n                <th className=\"text-left p-4 font-medium text-sm\">Severity</th>\n                <th className=\"text-left p-4 font-medium text-sm\">Rule</th>\n                <th className=\"text-left p-4 font-medium text-sm\">Agent</th>\n                <th className=\"text-left p-4 font-medium text-sm\">Time</th>\n                <th className=\"text-left p-4 font-medium text-sm\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {alerts?.map((alert) => (\n                <tr \n                  key={alert.id} \n                  className=\"border-b border-gray-700 hover:bg-wazuh-surface-variant transition-colors\"\n                  data-testid={`alert-row-${alert.id}`}\n                >\n                  <td className=\"p-4\">\n                    <Badge className={cn(\"inline-flex items-center px-2 py-1 rounded-full text-xs\", getSeverityClass(alert.severity))}>\n                      {getSeverityIcon(alert.severity)}\n                      {alert.severity}\n                    </Badge>\n                  </td>\n                  <td className=\"p-4 text-sm\" data-testid={`alert-rule-${alert.id}`}>{alert.rule}</td>\n                  <td className=\"p-4 text-sm\" data-testid={`alert-agent-${alert.id}`}>{alert.agentName}</td>\n                  <td className=\"p-4 text-sm text-gray-400\" data-testid={`alert-time-${alert.id}`}>\n                    {formatTimeAgo(alert.timestamp!)}\n                  </td>\n                  <td className=\"p-4\">\n                    <Button \n                      variant=\"link\" \n                      className=\"text-wazuh-primary hover:underline text-sm p-0\"\n                      data-testid={`button-investigate-${alert.id}`}\n                    >\n                      Investigate\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"p-4 border-t border-gray-700 flex items-center justify-between\">\n          <span className=\"text-sm text-gray-400\" data-testid=\"alerts-pagination-info\">\n            Showing {alerts?.length || 0} alerts\n          </span>\n          <div className=\"flex items-center space-x-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n              className=\"wazuh-surface-variant border-gray-600\"\n              data-testid=\"button-prev-page\"\n            >\n              Previous\n            </Button>\n            <Button \n              size=\"sm\"\n              onClick={() => setCurrentPage(currentPage + 1)}\n              className=\"wazuh-primary\"\n              data-testid=\"button-next-page\"\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6496},"client/src/components/dashboard/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Gauge, \n  TrendingUp, \n  AlertTriangle, \n  Bug, \n  Shield, \n  Target, \n  CreditCard, \n  UserCheck, \n  Hospital, \n  Bookmark, \n  Server, \n  Settings, \n  Code, \n  FlaskConical \n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  \n  const getRouteFromId = (id: string) => {\n    if (id === \"overview\") return \"/\";\n    return `/${id}`;\n  };\n  \n  const getActiveId = () => {\n    if (location === \"/\") return \"overview\";\n    return location.substring(1);\n  };\n\n  const menuItems = [\n    {\n      section: \"Dashboard\",\n      items: [\n        { id: \"overview\", icon: Gauge, label: \"Overview\", active: true },\n        { id: \"analytics\", icon: TrendingUp, label: \"Analytics\" },\n      ]\n    },\n    {\n      section: \"Security\",\n      items: [\n        { id: \"alerts\", icon: AlertTriangle, label: \"Alerts\", badge: \"24\" },\n        { id: \"vulnerabilities\", icon: Bug, label: \"Vulnerabilities\" },\n        { id: \"file-integrity\", icon: Shield, label: \"File Integrity\" },\n        { id: \"mitre-attack\", icon: Target, label: \"MITRE ATT&CK\" },\n      ]\n    },\n    {\n      section: \"Compliance\",\n      items: [\n        { id: \"pci-dss\", icon: CreditCard, label: \"PCI DSS\" },\n        { id: \"gdpr\", icon: UserCheck, label: \"GDPR\" },\n        { id: \"hipaa\", icon: Hospital, label: \"HIPAA\" },\n        { id: \"nist\", icon: Bookmark, label: \"NIST 800-53\" },\n      ]\n    },\n    {\n      section: \"Management\",\n      items: [\n        { id: \"agents\", icon: Server, label: \"Agents\", count: \"847\" },\n        { id: \"configuration\", icon: Settings, label: \"Configuration\" },\n        { id: \"api-console\", icon: Code, label: \"API Console\" },\n        { id: \"ruleset-test\", icon: FlaskConical, label: \"Ruleset Test\" },\n      ]\n    }\n  ];\n\n  type MenuItem = {\n    id: string;\n    icon: any;\n    label: string;\n    active?: boolean;\n    badge?: string;\n    count?: string;\n  };\n\n  return (\n    <aside className=\"w-64 wazuh-surface border-r border-gray-700 overflow-y-auto\" data-testid=\"sidebar\">\n      <div className=\"p-4\">\n        <div className=\"space-y-2\">\n          {menuItems.map((section, sectionIndex) => (\n            <div key={section.section} className={cn(\n              \"border-b border-gray-700 pb-2 mb-4\",\n              sectionIndex === menuItems.length - 1 && \"border-b-0\"\n            )}>\n              <h3 className=\"text-xs font-medium text-gray-400 uppercase tracking-wider mb-2\">\n                {section.section}\n              </h3>\n              {section.items.map((item) => (\n                <Link\n                  key={item.id}\n                  href={getRouteFromId(item.id)}\n                  className={cn(\n                    \"w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-gray-300 hover:bg-wazuh-surface-variant transition-colors\",\n                    getActiveId() === item.id && \"wazuh-primary\"\n                  )}\n                  data-testid={`sidebar-item-${item.id}`}\n                >\n                  <item.icon className=\"w-4 h-4\" />\n                  <span className=\"flex-1 text-left\">{item.label}</span>\n                  {(item as any).badge && (\n                    <span className=\"bg-red-500 text-xs px-2 py-1 rounded-full\">\n                      {(item as any).badge}\n                    </span>\n                  )}\n                  {(item as any).count && (\n                    <span className=\"text-xs text-gray-500\">\n                      {(item as any).count}\n                    </span>\n                  )}\n                </Link>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3681},"client/src/components/dashboard/top-nav.tsx":{"content":"import { Bell, ChevronDown, Shield } from \"lucide-react\";\n\nexport function TopNav() {\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 wazuh-surface border-b border-gray-700 px-6 py-4\" data-testid=\"top-nav\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Shield className=\"text-wazuh-primary text-2xl\" />\n            <h1 className=\"text-xl font-medium\" data-testid=\"platform-title\">Wazuh Security Platform</h1>\n          </div>\n          <div className=\"hidden md:flex items-center space-x-2 text-sm text-gray-400\">\n            <span>Manager:</span>\n            <span className=\"text-green-400\" data-testid=\"manager-name\">wazuh-manager-01</span>\n            <span className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" data-testid=\"manager-status\"></span>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative\">\n            <button className=\"text-gray-400 hover:text-white cursor-pointer\" data-testid=\"button-notifications\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 bg-red-500 text-xs rounded-full w-4 h-4 flex items-center justify-center\">\n                3\n              </span>\n            </button>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 wazuh-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium\" data-testid=\"user-initials\">AD</span>\n            </div>\n            <span className=\"hidden md:block text-sm\" data-testid=\"user-name\">Admin User</span>\n            <ChevronDown className=\"w-4 h-4 text-gray-400\" />\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1883},"client/src/components/dashboard/vulnerabilities-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\nimport { Button } from \"@/components/ui/button\";\n\ninterface VulnerabilityData {\n  name: string;\n  value: number;\n  color: string;\n}\n\nexport function VulnerabilitiesChart() {\n  const { data: vulnData, isLoading } = useQuery<VulnerabilityData[]>({\n    queryKey: [\"/api/vulnerabilities/distribution\"],\n    refetchInterval: 30000,\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"wazuh-surface border-gray-700\">\n        <CardHeader>\n          <CardTitle>Vulnerability Distribution</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 flex items-center justify-center\">\n            <div className=\"animate-pulse text-gray-400\">Loading chart data...</div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const COLORS = ['#EF4444', '#F59E0B', '#FCD34D', '#10B981'];\n\n  return (\n    <Card className=\"wazuh-surface border-gray-700\" data-testid=\"vulnerabilities-chart\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle data-testid=\"vulnerabilities-chart-title\">Vulnerability Distribution</CardTitle>\n          <Button \n            variant=\"link\" \n            className=\"text-wazuh-primary hover:underline text-sm p-0\"\n            data-testid=\"button-view-details\"\n          >\n            View Details\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={vulnData}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={40}\n                outerRadius={80}\n                paddingAngle={5}\n                dataKey=\"value\"\n              >\n                {vulnData?.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: '#1F2937', \n                  border: '1px solid #374151',\n                  borderRadius: '8px',\n                  color: '#E5E7EB'\n                }}\n              />\n              <Legend \n                wrapperStyle={{ color: '#E5E7EB' }}\n                iconType=\"circle\"\n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2639},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}